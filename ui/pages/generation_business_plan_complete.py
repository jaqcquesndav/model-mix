"""
Service de g√©n√©ration de business plan avec int√©gration des tableaux financiers
Version cyclique adapt√©e d'Origin.txt avec syst√®me de templates
"""

import streamlit as st
from typing import Dict, Any, List
from services.ai.content_generation import generate_section
from services.financial.calculations import calculer_tableaux_financiers_5_ans
from services.document.generation import format_table_to_markdown
from templates import get_metaprompt, get_system_messages
import pandas as pd
import tempfile
import os

def page_generation_business_plan_integree():
    """Page de g√©n√©ration du business plan avec tableaux financiers int√©gr√©s - Version cyclique"""
    st.title("üéØ G√©n√©rateur de Business Plan Complet")
    
    # R√©cup√©ration du template s√©lectionn√©
    template_actuel = st.session_state.get('template_selectionne', 'COPA TRANSFORME')
    
    st.info(f"üé® **Template actuel :** {template_actuel}")
    st.info("üìã Cette version g√©n√®re un business plan complet section par section, avec int√©gration automatique des tableaux financiers.")
    
    # Options de g√©n√©ration
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìÑ Option 1: G√©n√©ration avec document")
        uploaded_file = st.file_uploader("T√©l√©chargez un document de r√©f√©rence (PDF)", type="pdf", key="upload_doc")
        
        if uploaded_file:
            st.success(f"‚úÖ Document charg√©: {uploaded_file.name}")
    
    with col2:
        st.markdown("### ‚úçÔ∏è Option 2: G√©n√©ration par description")
        user_text_input = st.text_area(
            "D√©crivez votre projet/entreprise:",
            height=150,
            placeholder="D√©crivez votre entreprise, ses produits/services, son march√© cible, ses objectifs...",
            key="user_description"
        )
    
    # Options de g√©n√©ration
    st.markdown("### ‚öôÔ∏è Options de g√©n√©ration")
    col_opt1, col_opt2, col_opt3 = st.columns(3)
    
    with col_opt1:
        use_workflow_data = st.checkbox(
            "üìä Utiliser les donn√©es du workflow",
            value=True,
            help="Utilise les donn√©es saisies dans l'application (Business Model, finances, etc.)"
        )
    
    with col_opt2:
        show_progress = st.checkbox(
            "üìà Affichage en temps r√©el",
            value=True,
            help="Affiche les sections au fur et √† mesure de leur g√©n√©ration"
        )
    
    with col_opt3:
        split_generation = st.checkbox(
            "üîÑ G√©n√©ration en deux phases",
            value=True,
            help="S√©pare la g√©n√©ration en deux parties comme dans Origin.txt"
        )
    
    # Validation et g√©n√©ration
    can_generate = uploaded_file is not None or user_text_input.strip() != "" or use_workflow_data
    
    if not can_generate:
        st.warning("‚ö†Ô∏è Veuillez soit t√©l√©charger un document, soit saisir une description, soit cocher 'Utiliser les donn√©es du workflow'")
        return
    
    if st.button("üöÄ G√©n√©rer le Business Plan Complet", type="primary", disabled=not can_generate):
        generate_complete_business_plan_cyclique(
            uploaded_file=uploaded_file,
            user_text_input=user_text_input,
            template_nom=template_actuel,
            use_workflow_data=use_workflow_data,
            show_progress=show_progress,
            split_generation=split_generation
        )

def generate_complete_business_plan_cyclique(uploaded_file=None, user_text_input="", template_nom="COPA TRANSFORME", 
                                           use_workflow_data=True, show_progress=True, split_generation=True):
    """G√©n√®re un business plan complet avec strat√©gie cyclique adapt√©e d'Origin.txt"""
    
    # 1. Pr√©paration des documents et contexte
    documents = []
    combined_content = user_text_input if user_text_input else ""
    
    if uploaded_file:
        documents = process_uploaded_pdf(uploaded_file)
        if documents:
            st.success(f"‚úÖ {len(documents)} documents PDF trait√©s")
    
    # 2. R√©cup√©ration des donn√©es selon les options
    business_data = {}
    financial_tables_text = ""
    
    if use_workflow_data:
        business_data = collect_all_business_data()
        financial_tables = generate_all_financial_tables()
        financial_tables_text = financial_tables.get('formatted_text', '')
        
        if business_data:
            st.success("‚úÖ Donn√©es du workflow r√©cup√©r√©es")
    
    # 3. Configuration des sections selon le template
    sections_config = get_business_plan_sections_by_template(template_nom)
    
    # 4. G√©n√©ration cyclique avec strat√©gie d'Origin.txt
    results = {}
    placeholders = {}
    
    if show_progress:
        # Cr√©er des espaces r√©serv√©s pour chaque section
        placeholders = {name: st.empty() for name in sections_config.keys()}
    
    # 5. Logique de g√©n√©ration en deux phases (comme Origin.txt)
    if split_generation:
        # D√©finir le point de s√©paration 
        section_order = list(sections_config.keys())
        split_section = "Pr√©sentation de votre entreprise"
        
        # S√©parer les sections en deux groupes
        first_part = []
        second_part = []
        for section in section_order:
            if section == split_section:
                first_part.append(section)
                second_part = section_order[section_order.index(section)+1:]
                break
            else:
                first_part.append(section)
        
        # G√©n√©ration premi√®re partie
        st.markdown("### üîÑ **Phase 1 : Sections fondamentales**")
        progress_bar_1 = st.progress(0)
        
        for i, section_name in enumerate(first_part):
            if show_progress:
                with st.spinner(f"üéØ G√©n√©ration de {section_name}..."):
                    generate_section_cyclique(
                        section_name, sections_config[section_name], documents,
                        combined_content, financial_tables_text, business_data,
                        results, placeholders, template_nom
                    )
                    combined_content += " " + results[section_name]
            else:
                generate_section_cyclique(
                    section_name, sections_config[section_name], documents,
                    combined_content, financial_tables_text, business_data,
                    results, placeholders, template_nom
                )
                combined_content += " " + results[section_name]
            
            progress_bar_1.progress((i + 1) / len(first_part))
        
        st.success("‚úÖ Phase 1 termin√©e")
        
        # G√©n√©ration seconde partie
        st.markdown("### üîÑ **Phase 2 : Sections avanc√©es**")
        progress_bar_2 = st.progress(0)
        
        for i, section_name in enumerate(second_part):
            if show_progress:
                with st.spinner(f"üéØ G√©n√©ration de {section_name}..."):
                    generate_section_cyclique(
                        section_name, sections_config[section_name], documents,
                        combined_content, financial_tables_text, business_data,
                        results, placeholders, template_nom
                    )
                    combined_content += " " + results[section_name]
            else:
                generate_section_cyclique(
                    section_name, sections_config[section_name], documents,
                    combined_content, financial_tables_text, business_data,
                    results, placeholders, template_nom
                )
                combined_content += " " + results[section_name]
            
            progress_bar_2.progress((i + 1) / len(second_part))
        
        st.success("‚úÖ Phase 2 termin√©e")
        
    else:
        # G√©n√©ration continue
        progress_bar = st.progress(0)
        section_list = list(sections_config.keys())
        
        for i, section_name in enumerate(section_list):
            if show_progress:
                with st.spinner(f"üéØ G√©n√©ration de {section_name}..."):
                    generate_section_cyclique(
                        section_name, sections_config[section_name], documents,
                        combined_content, financial_tables_text, business_data,
                        results, placeholders, template_nom
                    )
                    combined_content += " " + results[section_name]
            else:
                generate_section_cyclique(
                    section_name, sections_config[section_name], documents,
                    combined_content, financial_tables_text, business_data,
                    results, placeholders, template_nom
                )
                combined_content += " " + results[section_name]
            
            progress_bar.progress((i + 1) / len(section_list))
    
    # 6. G√©n√©ration des fichiers de sortie
    create_export_files_cyclique(results, business_data, template_nom)

def generate_section_cyclique(section_name, section_config, documents, combined_content, 
                            financial_tables_text, business_data, results, placeholders, template_nom):
    """G√©n√®re une section individuelle avec la logique cyclique"""
    
    try:
        system_message = section_config["system_message"]
        query = section_config["query"]
        
        # Adaptation du contexte selon la section (comme Origin.txt)
        if section_name in ["Couverture", "Sommaire"]:
            # Sections simples sans contexte complexe
            content = generate_section(
                system_message=system_message,
                user_query=query,
                additional_context=combined_content,
                section_name=section_name
            )
        else:
            # Sections avec contexte business model et financier
            business_model = business_data.get('business_model', st.session_state.get('business_model_precedent', ''))
            
            content = generate_section(
                system_message=system_message,
                user_query=query,
                additional_context=combined_content + "\n\n" + financial_tables_text,
                section_name=section_name
            )
        
        results[section_name] = content
        
        # Affichage en temps r√©el si demand√©
        if placeholders and section_name in placeholders:
            placeholders[section_name].markdown(f"### {section_name}\n{content}")
            
    except Exception as e:
        error_msg = f"‚ùå Erreur lors de la g√©n√©ration de {section_name}: {str(e)}"
        results[section_name] = error_msg
        
        if placeholders and section_name in placeholders:
            placeholders[section_name].error(error_msg)

def collect_all_business_data() -> Dict[str, Any]:
    """Collecte toutes les donn√©es business de l'application avec logique cyclique"""
    data = st.session_state.get("data", {})
    
    return {
        "business_model": st.session_state.get('business_model_precedent', '') or st.session_state.get('business_model_initial', {}),
        "persona": st.session_state.get('persona_data', {}),
        "marche": st.session_state.get('analyse_marche', {}),
        "concurrence": st.session_state.get('concurrence', {}),
        "facteurs_limitants": st.session_state.get('facteurs_limitants_data', {}),
        "arbre_probleme": st.session_state.get('arbre_probleme', {}),
        "informations_generales": data.get("informations_generales", {}),
        "ca_previsions": data.get("ca_previsions", {}),
        "charges_variables": data.get("charges_variables", {}),
        "charges_fixes": data.get("charges_fixes", {}),
        "salaires": data.get("salaires", {}),
        "investissements": data.get("besoins_demarrage", {}),
        "financements": data.get("financements", {})
    }

def generate_all_financial_tables() -> Dict[str, Any]:
    """G√©n√®re tous les tableaux financiers et les formate pour le business plan cyclique"""
    
    data = st.session_state.get("data", {})
    
    try:
        # Utiliser notre service de calculs 5 ans
        tableaux_5_ans = calculer_tableaux_financiers_5_ans()
        
        # Formater tous les tableaux pour inclusion dans le business plan
        formatted_tables = format_financial_tables_for_business_plan_cyclique(tableaux_5_ans)
        
        return {
            "raw_data": tableaux_5_ans,
            "formatted_text": formatted_tables,
            "tables_list": list(tableaux_5_ans.keys()) if tableaux_5_ans else []
        }
        
    except Exception as e:
        st.warning(f"Erreur lors de la g√©n√©ration des tableaux financiers: {str(e)}")
        
        # Fallback vers les donn√©es export√©es du session state (comme Origin.txt)
        return get_financial_tables_from_session()

def get_financial_tables_from_session() -> Dict[str, Any]:
    """R√©cup√®re les tableaux financiers depuis le session state (logique Origin.txt)"""
    
    # R√©cup√©rer les donn√©es export√©es de toutes les sections (comme dans Origin.txt)
    export_data = {
        'investissements': st.session_state.get('export_data_investissements', {}),
        'salaires': st.session_state.get('export_data_salaires_charges_sociales', {}),
        'amortissements': st.session_state.get('export_data_detail_amortissements', {}),
        'compte': st.session_state.get('export_data_compte_resultats_previsionnel', {}),
        'soldes': st.session_state.get('export_data_soldes_intermediaires_de_gestion', {}),
        'capacite': st.session_state.get('export_data_capacite_autofinancement', {}),
        'seuil': st.session_state.get('export_data_seuil_rentabilite_economique', {}),
        'bfr': st.session_state.get('export_data_besoin_fonds_roulement', {}),
        'plan_financement': st.session_state.get('export_data_plan_financement_trois_ans', {}),
        'budget_part1': st.session_state.get('export_data_budget_previsionnel_tresorerie_part1', {}),
        'budget_part2': st.session_state.get('export_data_budget_previsionnel_tresorerie_part2', {})
    }
    
    # Formater le texte final (comme dans Origin.txt)
    final_text = ""
    section_titles = {
        'investissements': "Investissements et financements",
        'salaires': "Salaires et Charges Sociales", 
        'amortissements': "D√©tail des Amortissements",
        'compte': "Compte de r√©sultats pr√©visionnel",
        'soldes': "Soldes interm√©diaires de gestion",
        'capacite': "Capacit√© d'autofinancement",
        'seuil': "Seuil de rentabilit√© √©conomique",
        'bfr': "Besoin en fonds de roulement",
        'plan_financement': "Plan de financement √† trois ans",
        'budget_part1': "Budget pr√©visionnel de tr√©sorerie",
        'budget_part2': "Budget pr√©visionnel de tr√©sorerie (suite)"
    }
    
    for key, title in section_titles.items():
        if export_data[key]:
            final_text += format_table_data_cyclique(export_data[key], title)
    
    return {
        "raw_data": export_data,
        "formatted_text": final_text,
        "tables_list": list(section_titles.keys())
    }

def format_financial_tables_for_business_plan_cyclique(tableaux_data: Dict[str, Any]) -> str:
    """Formate tous les tableaux financiers en texte pour inclusion dans le business plan (style cyclique)"""
    
    if not tableaux_data:
        return "‚ö†Ô∏è Aucune donn√©e financi√®re disponible"
    
    formatted_text = "\n\n### TABLEAUX FINANCIERS D√âTAILL√âS\n\n"
    
    # Tableaux principaux √† inclure (priorit√© cyclique Origin.txt)
    tables_config = {
        "compte_resultats_5ans": {
            "title": "Compte de R√©sultats Pr√©visionnel (5 ans)",
            "description": "√âvolution pr√©visionnelle des revenus et charges sur 5 ann√©es"
        },
        "plan_financement_5ans": {
            "title": "Plan de Financement (5 ans)", 
            "description": "√âquilibre emplois/ressources sur 5 ann√©es"
        },
        "soldes_intermediaires_5ans": {
            "title": "Soldes Interm√©diaires de Gestion",
            "description": "Indicateurs de performance financi√®re"
        },
        "capacite_autofinancement_5ans": {
            "title": "Capacit√© d'Autofinancement",
            "description": "Ressources internes g√©n√©r√©es par l'activit√©"
        },
        "seuil_rentabilite_5ans": {
            "title": "Analyse du Seuil de Rentabilit√©",
            "description": "Point mort et analyse de rentabilit√©"
        },
        "bfr_5ans": {
            "title": "Besoin en Fonds de Roulement",
            "description": "Calcul et √©volution du BFR"
        }
    }
    
    for table_key, config in tables_config.items():
        if table_key in tableaux_data:
            table_data = tableaux_data[table_key]
            
            formatted_text += f"\n#### {config['title']}\n\n"
            formatted_text += f"*{config['description']}*\n\n"
            
            # Formater le tableau selon son type
            if isinstance(table_data, dict) and "table_data" in table_data:
                formatted_text += format_table_to_markdown(table_data["table_data"])
            elif isinstance(table_data, dict) and "data" in table_data:
                formatted_text += format_table_to_markdown(table_data["data"])
            else:
                formatted_text += "Donn√©es non disponibles pour ce tableau\n\n"
            
            formatted_text += "---\n\n"
    
    return formatted_text

def format_table_data_cyclique(data: Dict[str, Any], title: str) -> str:
    """Formate les donn√©es de tableau en texte (style Origin.txt)"""
    if not data:
        return ""
    
    text = f"\n\n### {title}\n\n"
    
    # Si c'est une structure de table avec table_data
    if isinstance(data, dict) and "table_data" in data:
        table_data = data["table_data"]
        if isinstance(table_data, list) and table_data:
            # Convertir en DataFrame pour le formatage
            try:
                df = pd.DataFrame(table_data)
                text += df.to_markdown(index=False)
                text += "\n\n"
            except:
                # Fallback simple
                for row in table_data:
                    if isinstance(row, dict):
                        for key, value in row.items():
                            text += f"  {key}: {value}\n"
                    text += "\n"
    
    # Si c'est un dictionnaire simple
    elif isinstance(data, dict):
        for key, value in data.items():
            if key != "table_data":  # √âviter la redondance
                text += f"  **{key}**: {value}\n"
        text += "\n"
    
    return text


# Fonction manquante pour compatibilit√© avec le syst√®me existant
def prepare_section_context(section_name: str, business_data: Dict, financial_tables: Dict, user_input: str) -> str:
    """Pr√©pare le contexte sp√©cifique pour chaque section (compatibilit√©)"""
    
    base_context = f"""
DONN√âES BUSINESS MODEL: {business_data.get('business_model', '')}

INFORMATIONS G√âN√âRALES: {business_data.get('informations_generales', {})}

INFORMATIONS UTILISATEUR: {user_input}
"""
    
    # Contexte sp√©cifique selon la section
    if section_name == "Plan financier":
        # Pour la section financi√®re, inclure tous les tableaux
        return base_context + f"\n\nTABLEAUX FINANCIERS:\n{financial_tables.get('formatted_text', '')}"
    
    elif section_name in ["R√©sum√© Ex√©cutif", "Pr√©sentation de votre entreprise"]:
        # Inclure les donn√©es business principales
        return base_context + f"""
PERSONA: {business_data.get('persona', {})}
ANALYSE MARCH√â: {business_data.get('marche', {})}
CONCURRENCE: {business_data.get('concurrence', {})}
"""
    
    else:
        return base_context

def prepare_section_context(section_name: str, business_data: Dict, financial_tables: Dict, user_input: str) -> str:
    """Pr√©pare le contexte sp√©cifique pour chaque section"""
    
    base_context = f"""
DONN√âES BUSINESS MODEL: {business_data.get('business_model', '')}

INFORMATIONS G√âN√âRALES: {business_data.get('informations_generales', {})}

INFORMATIONS UTILISATEUR: {user_input}
"""
    
    # Contexte sp√©cifique selon la section
    if section_name == "Plan financier":
        # Pour la section financi√®re, inclure tous les tableaux
        return base_context + f"\n\nTABLEAUX FINANCIERS:\n{financial_tables.get('formatted_text', '')}"
    
    elif section_name in ["R√©sum√© Ex√©cutif", "Pr√©sentation de votre entreprise"]:
        # Inclure les donn√©es business principales
        return base_context + f"""
PERSONA: {business_data.get('persona', {})}
ANALYSE MARCH√â: {business_data.get('marche', {})}
CONCURRENCE: {business_data.get('concurrence', {})}
"""
    
    else:
        return base_context

def get_business_plan_sections_by_template(template_nom="COPA TRANSFORME") -> Dict[str, Dict[str, str]]:
    """D√©finit les sections du business plan selon le template s√©lectionn√© avec style Origin.txt"""
    
    # R√©cup√©rer les messages syst√®me sp√©cialis√©s du template
    template_system_messages = get_system_messages(template_nom)
    
    # Structure de base adapt√©e d'Origin.txt
    base_sections = {
        "Couverture": {
            "system_message": f"""
            G√©n√©rer cette section du business plan selon le template {template_nom}:
            
            # Canevas de Plans d'Affaires
            **Template :** {template_nom}
            
            Nom du projet ou entreprise
            Secteur d'activit√©
            Date de cr√©ation du plan
            
            G√©n√©rer une couverture professionnelle adapt√©e au contexte.
            """,
            "query": "Cr√©er une page de couverture professionnelle"
        },
        
        "Sommaire": {
            "system_message": f"""
            G√©n√©rer cette section du business plan selon le template {template_nom}:
            
            ## Sommaire
            I. R√©sum√© Ex√©cutif ¬´ Executive Summary ¬ª / Pitch
            II. Pr√©sentation de votre entreprise/projet
            III. Pr√©sentation de l'offre de produit(s) et/ou service(s)  
            IV. √âtude de march√©
            V. Strat√©gie marketing, communication et politique commerciale
            VI. Moyens de production et organisation 
            VII. √âtude des risques/hypoth√®ses  
            VIII. Plan financier 
            IX. Annexes
            
            Afficher le sommaire structur√© sous forme de liste num√©rot√©e.
            """,
            "query": "Afficher le sommaire du business plan"
        },
        
        "R√©sum√© Ex√©cutif": {
            "system_message": template_system_messages.get("business_plan", f"""
            Vous √™tes un expert en d√©veloppement √©conomique sp√©cialis√© dans le template {template_nom}.
            
            G√©n√©rer cette section du business plan:
            
            ## I. R√©sum√© Ex√©cutif ¬´ Executive Summary ¬ª / Pitch
            
            G√©n√©rer deux grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
            - Attirer l'attention du lecteur en 5 minutes et lui donner envie d'en savoir plus
            - D√©crire le projet en quelques phrases simples et impactantes
            - Ne pas essayer de tout couvrir, soyez concis et pr√©cis
            
            Les √©l√©ments cl√©s √† g√©n√©rer et qui doivent √™tre contenus dans les paragraphes :
            - **Pr√©sentation de la PME** : Nom de l'entreprise et br√®ve description du service/produit fourni
            - **Pr√©sentation des porteurs de projet** : Profil des entrepreneurs
            - **Potentiel en termes de taille et de profit** : D√©montrez comment l'entreprise fera du profit
            - **Besoin financier** : Montant n√©cessaire et utilisation pr√©vue
            
            Adaptez le contenu au contexte et aux sp√©cificit√©s du template {template_nom}.
            """),
            "query": "D√©crire bri√®vement le projet, son potentiel de profit et les qualifications de l'√©quipe."
        },
        
        "Pr√©sentation de votre entreprise": {
            "system_message": template_system_messages.get("business_plan", f"""
            Vous √™tes un expert en d√©veloppement √©conomique sp√©cialis√© dans le template {template_nom}.
            
            G√©n√©rer cette section du business plan:

            ## II. Pr√©sentation de votre entreprise/projet

            G√©n√©rer 6 grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
            - Parler de votre entreprise/projet de mani√®re plus d√©taill√©e
            - Pr√©senter l'√©quipe manag√©riale cl√©

            Les √©l√©ments cl√©s √† g√©n√©rer et qui doivent √™tre contenus dans les paragraphes :
            - **Informations g√©n√©rales sur la PME** : Forme juridique, si√®ge social, coordonn√©es, couverture g√©ographique
            - **Description d√©taill√©e de la PME et objectifs** : Origine, atouts/opportunit√©s, description du projet
            - **Stade d'avancement** : Ce qui a √©t√© fait, projets futurs, niveau de maturit√©, financements acquis
            - **√âquipe manag√©riale** : Organigramme, ressources humaines, associ√©s et parts sociales
            - **Analyse SWOT** : Forces, faiblesses, opportunit√©s, contraintes/menaces (de pr√©f√©rence sous forme de tableau)
            - **Business Model Canvas** : Les 9 rubriques bien remplies selon le template {template_nom}
            
            Adaptez le contenu aux sp√©cificit√©s du template {template_nom}.
            """),
            "query": "Pr√©senter l'entreprise de fa√ßon compl√®te et structur√©e selon le template"
        }
    }
    
    # Ajouter les sections sp√©cialis√©es selon le template
    if template_nom == "COPA TRANSFORME":
        base_sections.update(get_copa_specialized_sections())
    elif template_nom == "Virunga":
        base_sections.update(get_virunga_specialized_sections())
    elif template_nom == "IP Femme":
        base_sections.update(get_ip_femme_specialized_sections())
    
    return base_sections

def get_copa_specialized_sections():
    """Sections sp√©cialis√©es pour COPA TRANSFORM√â"""
    return {
        "Pr√©sentation de l'offre de produit": {
            "system_message": """
            Vous √™tes un expert COPA TRANSFORM√â sp√©cialis√© dans l'agrotransformation et l'autonomisation des femmes en RDC.
            
            ## III. Pr√©sentation de l'offre de produit(s) et/ou service(s)
            
            G√©n√©rer 5 grands paragraphes focalis√©s sur :
            - **Produits/services agroalimentaires** : Transformation locale, cha√Ænes de valeur
            - **Besoins identifi√©s** : S√©curit√© alimentaire, cr√©ation de valeur ajout√©e locale
            - **Description d√©taill√©e** : Processus de transformation, qualit√©, tra√ßabilit√©
            - **Proposition de valeur unique** : Autonomisation des femmes, d√©veloppement rural
            - **Aspect genre et environnement** : Impact social, durabilit√© environnementale
            
            Int√©grez les sp√©cificit√©s COPA TRANSFORM√â : d√©veloppement √©conomique rural, cha√Ænes de valeur agricoles.
            """,
            "query": "D√©crire l'offre dans le contexte COPA TRANSFORM√â agroalimentaire"
        },
        
        "√âtude de march√©": {
            "system_message": """
            Expert COPA TRANSFORM√â - Analyse de march√© agroalimentaire RDC.
            
            ## IV. √âtude de march√©
            
            Analyser selon 8 axes COPA sp√©cialis√©s :
            1. **M√©thodologie** : √âtude des cha√Ænes de valeur agricoles, march√©s ruraux/urbains
            2. **March√© g√©n√©ral** : Secteur agroalimentaire RDC, s√©curit√© alimentaire, import/export
            3. **Demande** : Consommation locale, pr√©f√©rences alimentaires, pouvoir d'achat rural/urbain
            4. **Offre concurrentielle** : Transformateurs locaux, importations, circuits informels
            5. **Environnement** : Politique agricole, r√©glementation sanitaire, infrastructures rurales
            6. **Partenariats** : Coop√©ratives agricoles, organismes de d√©veloppement, institutions de financement agricole
            7. **Emplois** : Impact sur l'emploi rural, autonomisation des femmes, jeunes agriculteurs
            8. **CA pr√©visionnel** : Saisonnalit√© agricole, circuits de commercialisation
            
            Focalisez sur le contexte rural congolais et la transformation agricole.
            """,
            "query": "Analyser le march√© agroalimentaire selon les sp√©cificit√©s COPA TRANSFORM√â"
        }
    }

def get_virunga_specialized_sections():
    """Sections sp√©cialis√©es pour Virunga"""
    return {
        "Pr√©sentation de l'offre de produit": {
            "system_message": """
            Expert Virunga - Conservation et d√©veloppement durable.
            
            ## III. Pr√©sentation de l'offre de produit(s) et/ou service(s)
            
            G√©n√©rer selon l'approche Virunga :
            - **Produits/services √©co-responsables** : √âcotourisme, produits forestiers durables
            - **Besoins environnementaux** : Conservation biodiversit√©, d√©veloppement communautaire
            - **Description √©cologique** : Impact environnemental positif, durabilit√©
            - **Valeur conservation** : Protection √©cosyst√®me, revenus communautaires
            - **Approche genre et environnement** : Femmes dans la conservation, √©ducation environnementale
            """,
            "query": "D√©crire l'offre dans le contexte conservation Virunga"
        }
    }

def get_ip_femme_specialized_sections():
    """Sections sp√©cialis√©es pour IP Femme"""
    return {
        "Pr√©sentation de l'offre de produit": {
            "system_message": """
            Expert IP Femme - Autonomisation √©conomique des femmes.
            
            ## III. Pr√©sentation de l'offre de produit(s) et/ou service(s)
            
            G√©n√©rer selon l'approche IP Femme :
            - **Produits/services par les femmes** : Artisanat, services, technologies adapt√©es
            - **Besoins d'autonomisation** : Ind√©pendance √©conomique, comp√©tences entrepreneuriales
            - **Description inclusive** : Accessibilit√©, formation, accompagnement
            - **Valeur sociale** : Empowerment, √©quit√© genre, impact communautaire
            - **Genre et innovation** : Leadership f√©minin, innovations sociales
            """,
            "query": "D√©crire l'offre dans le contexte autonomisation IP Femme"
        }
    }

def create_export_files_cyclique(results: Dict[str, str], business_data: Dict[str, Any], template_nom: str):
    """Cr√©e les fichiers d'export avec style cyclique Origin.txt"""
    
    st.subheader("üì• T√©l√©chargements")
    
    # Cr√©er le contenu complet avec m√©tadonn√©es du template
    complete_content = f"""# Business Plan Complet - Template {template_nom}
**Date de g√©n√©ration :** {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}
**Entreprise :** {business_data.get('informations_generales', {}).get('nom_entreprise', 'Non sp√©cifi√©e')}
**Template utilis√© :** {template_nom}

---

"""
    
    # Ajouter toutes les sections g√©n√©r√©es
    for section_name, content in results.items():
        complete_content += f"\n\n## {section_name}\n\n{content}"
    
    # Options d'export
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ T√©l√©charger Word"):
            try:
                word_buffer = generate_word_document_cyclique(results, business_data, template_nom)
                st.download_button(
                    label="‚¨áÔ∏è Business Plan.docx",
                    data=word_buffer,
                    file_name=f"business_plan_{template_nom.lower().replace(' ', '_')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            except Exception as e:
                st.error(f"Erreur g√©n√©ration Word : {str(e)}")
    
    with col2:
        if st.button("üìë T√©l√©charger Markdown"):
            st.download_button(
                label="‚¨áÔ∏è Business Plan.md",
                data=complete_content,
                file_name=f"business_plan_{template_nom.lower().replace(' ', '_')}.md",
                mime="text/markdown"
            )
    
    with col3:
        if st.button("üìä Donn√©es JSON"):
            try:
                export_data = {
                    "template": template_nom,
                    "timestamp": pd.Timestamp.now().isoformat(),
                    "business_data": business_data,
                    "sections": results
                }
                
                import json
                json_data = json.dumps(export_data, indent=2, ensure_ascii=False, default=str)
                
                st.download_button(
                    label="‚¨áÔ∏è Donn√©es.json",
                    data=json_data,
                    file_name=f"business_data_{template_nom.lower().replace(' ', '_')}.json",
                    mime="application/json"
                )
            except Exception as e:
                st.error(f"Erreur export JSON : {str(e)}")

def generate_word_document_cyclique(results: Dict[str, str], business_data: Dict[str, Any], template_nom: str):
    """G√©n√®re un document Word avec style cyclique et template"""
    from docx import Document
    from docx.shared import Inches
    from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
    from io import BytesIO
    import re
    
    doc = Document()
    
    # En-t√™te avec informations du template
    header = doc.sections[0].header
    header_para = header.paragraphs[0]
    header_para.text = f"Business Plan - Template {template_nom}"
    header_para.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    # Titre principal
    title = doc.add_heading(f'Business Plan Complet', 0)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Sous-titre avec template
    subtitle = doc.add_paragraph(f"Template : {template_nom}")
    subtitle.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    subtitle.runs[0].bold = True
    
    # Informations m√©tadonn√©es
    meta_para = doc.add_paragraph()
    meta_para.add_run("Date de g√©n√©ration : ").bold = True
    meta_para.add_run(pd.Timestamp.now().strftime('%d/%m/%Y %H:%M'))
    meta_para.add_run("\nEntreprise : ").bold = True
    meta_para.add_run(business_data.get('informations_generales', {}).get('nom_entreprise', 'Non sp√©cifi√©e'))
    
    doc.add_page_break()
    
    # Ajouter chaque section avec traitement markdown basique
    for section_name, content in results.items():
        
        # Titre de section
        doc.add_heading(section_name, 1)
        
        # Traitement du contenu markdown (adapt√© d'Origin.txt)
        lines = content.split('\n')
        table_data = []
        inside_table = False
        
        for line in lines:
            line = line.strip()
            if not line:
                if table_data:
                    add_table_with_borders_cyclique(doc, table_data)
                    table_data = []
                    inside_table = False
                continue
            
            if line.startswith('###'):
                doc.add_heading(line[3:].strip(), level=3)
            elif line.startswith('##'):
                doc.add_heading(line[2:].strip(), level=2)
            elif line.startswith('#'):
                doc.add_heading(line[1:].strip(), level=1)
            elif line.startswith('|') and '|' in line:
                # Tableau d√©tect√©
                if not inside_table:
                    inside_table = True
                if not line.replace('|', '').replace('-', '').replace(' ', '').strip():
                    continue  # Ligne de s√©paration
                table_data.append([cell.strip() for cell in line.split('|')[1:-1]])
            elif re.match(r'^\d+\.', line):
                doc.add_paragraph(line, style='List Number')
            elif line.startswith('- ') or line.startswith('‚Ä¢ '):
                doc.add_paragraph(line[2:], style='List Bullet')
            else:
                if inside_table and table_data:
                    add_table_with_borders_cyclique(doc, table_data)
                    table_data = []
                    inside_table = False
                
                # Traitement du texte en gras **texte**
                para = doc.add_paragraph()
                parts = re.split(r'(\*\*.+?\*\*)', line)
                for part in parts:
                    if part.startswith('**') and part.endswith('**'):
                        run = para.add_run(part[2:-2])
                        run.bold = True
                    else:
                        para.add_run(part)
        
        # Traiter la derni√®re table si elle existe
        if table_data:
            add_table_with_borders_cyclique(doc, table_data)
    
    # Sauvegarder en buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer.getvalue()

def add_table_with_borders_cyclique(doc, table_data):
    """Ajoute un tableau avec bordures au document Word (style Origin.txt)"""
    if not table_data:
        return
    
    from docx.enum.table import WD_TABLE_ALIGNMENT
    
    num_cols = len(table_data[0])
    table = doc.add_table(rows=len(table_data), cols=num_cols)
    table.style = 'Table Grid'
    table.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    for i, row in enumerate(table_data):
        for j, cell_content in enumerate(row):
            if j < len(table.columns):
                cell = table.cell(i, j)
                cell.text = str(cell_content)
                
                # Style de la premi√®re ligne (en-t√™te)
                if i == 0:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.bold = True

def process_uploaded_pdf(uploaded_file):
    """Traite un fichier PDF upload√© (comme dans Origin.txt)"""
    try:
        # Sauvegarder temporairement le fichier
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
            tmp_file.write(uploaded_file.read())
            tmp_file_path = tmp_file.name
        
        # Charger et diviser le document (utilise les fonctions LangChain existantes)
        from services.ai.content_generation import load_and_split_documents
        documents = load_and_split_documents(tmp_file_path)
        
        # Nettoyer le fichier temporaire
        os.unlink(tmp_file_path)
        
        return documents
        
    except Exception as e:
        st.error(f"Erreur lors du traitement du PDF : {str(e)}")
        return []

def process_uploaded_pdf(uploaded_file):
    """Traite un fichier PDF upload√©"""
    # √Ä impl√©menter si n√©cessaire
    return []
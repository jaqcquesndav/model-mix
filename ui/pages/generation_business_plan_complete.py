"""
Service de g√©n√©ration de business plan avec int√©gration des tableaux financiers
"""

import streamlit as st
from typing import Dict, Any, List
from services.ai.content_generation import generate_section
from services.financial.calculations import calculer_tableaux_financiers_5_ans
import pandas as pd

def page_generation_business_plan_integree():
    """Page de g√©n√©ration du business plan avec tableaux financiers int√©gr√©s"""
    st.title("üéØ G√©n√©rateur de Business Plan Complet")
    
    st.info("Cette version int√®gre automatiquement tous les tableaux financiers dans le plan d'affaires.")
    
    # Upload de fichier optionnel
    uploaded_file = st.file_uploader("üìÑ T√©l√©chargez un document de r√©f√©rence (PDF)", type="pdf")
    user_text_input = st.text_area("üìù Informations suppl√©mentaires:", height=150)
    
    if st.button("üöÄ G√©n√©rer le Business Plan Complet", type="primary"):
        generate_complete_business_plan(uploaded_file, user_text_input)

def generate_complete_business_plan(uploaded_file=None, user_text_input=""):
    """G√©n√®re un business plan complet avec tous les tableaux financiers"""
    
    # 1. Pr√©paration des donn√©es
    documents = []
    if uploaded_file:
        # Traitement du fichier PDF
        documents = process_uploaded_pdf(uploaded_file)
    
    # 2. R√©cup√©ration de toutes les donn√©es
    business_data = collect_all_business_data()
    financial_tables = generate_all_financial_tables()
    
    # 3. G√©n√©ration section par section
    sections = get_business_plan_sections()
    results = {}
    
    # Progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_sections = len(sections)
    
    for i, (section_name, section_config) in enumerate(sections.items()):
        status_text.text(f"G√©n√©ration de {section_name}...")
        
        # Pr√©parer le contexte sp√©cifique √† la section
        context = prepare_section_context(
            section_name, 
            business_data, 
            financial_tables, 
            user_text_input
        )
        
        # G√©n√©rer la section
        try:
            results[section_name] = generate_section(
                section_config["system_message"],
                section_config["query"],
                documents,
                context,
                financial_tables.get("formatted_text", ""),
                business_model=business_data.get("business_model", ""),
                section_name=section_name
            )
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration de {section_name}: {str(e)}")
            results[section_name] = f"‚ö†Ô∏è Section non g√©n√©r√©e: {str(e)}"
        
        # Mise √† jour de la progress bar
        progress_bar.progress((i + 1) / total_sections)
        
        # Affichage imm√©diat du r√©sultat
        st.markdown(f"## {section_name}")
        st.markdown(results[section_name])
        st.divider()
    
    status_text.text("‚úÖ G√©n√©ration termin√©e!")
    
    # 4. Cr√©ation des fichiers de sortie
    create_export_files(results, financial_tables)

def collect_all_business_data() -> Dict[str, Any]:
    """Collecte toutes les donn√©es business de l'application"""
    data = st.session_state.get("data", {})
    
    return {
        "business_model": st.session_state.get('business_model_precedent', ''),
        "persona": st.session_state.get('persona_data', {}),
        "marche": st.session_state.get('analyse_marche', {}),
        "concurrence": st.session_state.get('concurrence', {}),
        "facteurs_limitants": st.session_state.get('facteurs_limitants_data', {}),
        "arbre_probleme": st.session_state.get('problem_tree_data', {}),
        "informations_generales": data.get("informations_generales", {}),
        "ca_previsions": data.get("ca_previsions", {}),
        "charges_variables": data.get("charges_variables", {}),
        "charges_fixes": data.get("charges_fixes", {}),
        "salaires": data.get("salaires", {}),
        "investissements": data.get("besoins_demarrage", {}),
        "financements": data.get("financements", {})
    }

def generate_all_financial_tables() -> Dict[str, Any]:
    """G√©n√®re tous les tableaux financiers et les formate pour le business plan"""
    
    data = st.session_state.get("data", {})
    
    # Utiliser notre nouveau service de calculs 5 ans
    try:
        tableaux_5_ans = calculer_tableaux_financiers_5_ans(data)
        
        # Formater tous les tableaux pour inclusion dans le business plan
        formatted_tables = format_financial_tables_for_business_plan(tableaux_5_ans)
        
        return {
            "raw_data": tableaux_5_ans,
            "formatted_text": formatted_tables,
            "tables_list": list(tableaux_5_ans.keys()) if tableaux_5_ans else []
        }
        
    except Exception as e:
        st.warning(f"Erreur lors de la g√©n√©ration des tableaux financiers: {str(e)}")
        return {
            "raw_data": {},
            "formatted_text": "‚ö†Ô∏è Tableaux financiers non disponibles - Veuillez compl√©ter les donn√©es financi√®res",
            "tables_list": []
        }

def format_financial_tables_for_business_plan(tableaux_data: Dict[str, Any]) -> str:
    """Formate tous les tableaux financiers en texte pour inclusion dans le business plan"""
    
    if not tableaux_data:
        return "‚ö†Ô∏è Aucune donn√©e financi√®re disponible"
    
    formatted_text = "\n\n### TABLEAUX FINANCIERS D√âTAILL√âS\n\n"
    
    # Tableaux principaux √† inclure
    tables_config = {
        "compte_resultats_5_ans": {
            "title": "Compte de R√©sultats Pr√©visionnel (5 ans)",
            "description": "Evolution pr√©visionnelle des revenus et charges sur 5 ann√©es"
        },
        "plan_financement_5_ans": {
            "title": "Plan de Financement (5 ans)", 
            "description": "√âquilibre emplois/ressources sur 5 ann√©es"
        },
        "tresorerie_mensuelle": {
            "title": "Budget de Tr√©sorerie Mensuel",
            "description": "Pr√©visions de tr√©sorerie mois par mois"
        },
        "soldes_intermediaires": {
            "title": "Soldes Interm√©diaires de Gestion",
            "description": "Indicateurs de performance financi√®re"
        },
        "seuil_rentabilite": {
            "title": "Analyse du Seuil de Rentabilit√©",
            "description": "Point mort et analyse de rentabilit√©"
        },
        "besoin_fonds_roulement": {
            "title": "Besoin en Fonds de Roulement",
            "description": "Calcul et √©volution du BFR"
        }
    }
    
    for table_key, config in tables_config.items():
        if table_key in tableaux_data:
            table_data = tableaux_data[table_key]
            
            formatted_text += f"\n#### {config['title']}\n\n"
            formatted_text += f"*{config['description']}*\n\n"
            
            # Formater le tableau selon son type
            if isinstance(table_data, dict) and "table_data" in table_data:
                formatted_text += format_table_to_markdown(table_data["table_data"])
            elif isinstance(table_data, dict) and "data" in table_data:
                formatted_text += format_table_to_markdown(table_data["data"])
            else:
                formatted_text += "Donn√©es non disponibles pour ce tableau\n\n"
            
            # Ajouter l'analyse si disponible
            if isinstance(table_data, dict) and "analyse" in table_data:
                formatted_text += f"\n**Analyse:**\n{table_data['analyse']}\n\n"
            
            formatted_text += "---\n\n"
    
    return formatted_text

def format_table_to_markdown(table_data: List[Dict]) -> str:
    """Convertit des donn√©es de tableau en format Markdown"""
    
    if not table_data or not isinstance(table_data, list):
        return "Aucune donn√©e disponible\n\n"
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(table_data)
    
    # Convertir en Markdown
    markdown_table = df.to_markdown(index=False)
    
    return f"{markdown_table}\n\n"

def prepare_section_context(section_name: str, business_data: Dict, financial_tables: Dict, user_input: str) -> str:
    """Pr√©pare le contexte sp√©cifique pour chaque section"""
    
    base_context = f"""
DONN√âES BUSINESS MODEL: {business_data.get('business_model', '')}

INFORMATIONS G√âN√âRALES: {business_data.get('informations_generales', {})}

INFORMATIONS UTILISATEUR: {user_input}
"""
    
    # Contexte sp√©cifique selon la section
    if section_name == "Plan financier":
        # Pour la section financi√®re, inclure tous les tableaux
        return base_context + f"\n\nTABLEAUX FINANCIERS:\n{financial_tables.get('formatted_text', '')}"
    
    elif section_name in ["R√©sum√© Ex√©cutif", "Pr√©sentation de votre entreprise"]:
        # Inclure les donn√©es business principales
        return base_context + f"""
PERSONA: {business_data.get('persona', {})}
ANALYSE MARCH√â: {business_data.get('marche', {})}
CONCURRENCE: {business_data.get('concurrence', {})}
"""
    
    else:
        return base_context

def get_business_plan_sections() -> Dict[str, Dict[str, str]]:
    """D√©finit toutes les sections du business plan avec leurs configurations"""
    
    return {
        "Couverture": {
            "system_message": """
G√©n√©rer la page de couverture du business plan:

# PLAN D'AFFAIRES

**Nom du projet/entreprise:** [√Ä extraire des donn√©es]

**Secteur d'activit√©:** [√Ä d√©finir selon les donn√©es]

**Date:** [Date actuelle]

**Porteur(s) de projet:** [√Ä extraire des informations g√©n√©rales]
""",
            "query": "Cr√©er une page de couverture professional"
        },
        
        "Sommaire": {
            "system_message": """
G√©n√©rer le sommaire du business plan:

## SOMMAIRE

I. R√©sum√© Ex√©cutif
II. Pr√©sentation de l'entreprise/projet  
III. Pr√©sentation de l'offre (produits/services)
IV. √âtude de march√©
V. Strat√©gie marketing et commerciale
VI. Moyens de production et organisation
VII. √âtude des risques
VIII. Plan financier
IX. Annexes
""",
            "query": "Afficher le sommaire structur√© du business plan"
        },
        
        "R√©sum√© Ex√©cutif": {
            "system_message": """
G√©n√©rer le r√©sum√© ex√©cutif du business plan:

## I. R√âSUM√â EX√âCUTIF

L'objectif est d'attirer l'attention en 5 minutes et donner envie d'en savoir plus.

√âl√©ments √† inclure (2-3 paragraphes impactants):
- Pr√©sentation de l'entreprise et de son offre
- Pr√©sentation des porteurs de projet
- Potentiel de march√© et de profit
- Besoins financiers

Soyez concis, pr√©cis et impactant.
""",
            "query": "R√©diger un r√©sum√© ex√©cutif percutant"
        },
        
        "Pr√©sentation de votre entreprise": {
            "system_message": """
G√©n√©rer la pr√©sentation d√©taill√©e de l'entreprise:

## II. PR√âSENTATION DE L'ENTREPRISE/PROJET

D√©velopper en 6 paragraphes:
1. **Informations g√©n√©rales** (forme juridique, si√®ge, coordonn√©es)
2. **Description d√©taill√©e et objectifs** 
3. **Stade d'avancement** (r√©alisations, projets futurs)
4. **√âquipe manag√©riale** (organigramme, associ√©s)
5. **Analyse SWOT** (forces, faiblesses, opportunit√©s, menaces)
6. **Business Model Canvas** (9 rubriques d√©taill√©es)
""",
            "query": "Pr√©senter l'entreprise de fa√ßon compl√®te et structur√©e"
        },
        
        "Pr√©sentation de l'offre de produit": {
            "system_message": """
G√©n√©rer la pr√©sentation de l'offre:

## III. PR√âSENTATION DE L'OFFRE (PRODUITS/SERVICES)

D√©velopper en 5 paragraphes:
1. **Noms des produits/services**
2. **Besoins identifi√©s** sur le march√©
3. **Description d√©taill√©e** de l'offre
4. **Proposition de valeur unique**
5. **Prise en compte de l'aspect genre**
""",
            "query": "D√©crire l'offre produits/services et sa valeur unique"
        },
        
        "√âtude de march√©": {
            "system_message": """
G√©n√©rer l'√©tude de march√©:

## IV. √âTUDE DE MARCH√â

Analyser en d√©tail:
1. **Taille et tendances du march√©**
2. **Segmentation de la client√®le**
3. **Analyse de la concurrence**
4. **Positionnement concurrentiel**
5. **Opportunit√©s et menaces**
""",
            "query": "Analyser le march√© cible et l'environnement concurrentiel"
        },
        
        "Strat√©gie Marketing": {
            "system_message": """
G√©n√©rer la strat√©gie marketing:

## V. STRAT√âGIE MARKETING ET COMMERCIALE

D√©tailler:
1. **Segments cibles**
2. **Positionnement**
3. **Mix marketing** (Produit, Prix, Place, Promotion)
4. **Actions commerciales pr√©vues**
5. **Objectifs et indicateurs**
""",
            "query": "D√©finir la strat√©gie marketing et commerciale"
        },
        
        "Moyens de production et organisation": {
            "system_message": """
G√©n√©rer la section moyens et organisation:

## VI. MOYENS DE PRODUCTION ET ORGANISATION

Pr√©senter:
1. **Moyens humains** (√©quipe, recrutements)
2. **Moyens mat√©riels** (√©quipements, locaux)
3. **Organisation op√©rationnelle**
4. **Processus de production/service**
5. **Partenaires cl√©s**
""",
            "query": "D√©crire l'organisation op√©rationnelle et les moyens"
        },
        
        "√âtude des risques": {
            "system_message": """
G√©n√©rer l'√©tude des risques:

## VII. √âTUDE DES RISQUES

Identifier et analyser:
1. **Risques commerciaux**
2. **Risques financiers**
3. **Risques op√©rationnels**
4. **Risques concurrentiels**
5. **Strat√©gies de mitigation**
""",
            "query": "Identifier les risques et proposer des solutions"
        },
        
        "Plan financier": {
            "system_message": """
G√©n√©rer l'analyse compl√®te du plan financier:

## VIII. PLAN FINANCIER

Analyser en d√©tail avec tous les tableaux financiers:

1. **Introduction** √† l'analyse financi√®re
2. **Analyse des investissements et financements**
3. **Analyse des charges et rentabilit√©**
4. **Soldes interm√©diaires de gestion**
5. **Capacit√© d'autofinancement et seuil de rentabilit√©**
6. **Besoin en fonds de roulement**
7. **Plan de financement sur 5 ans**
8. **Tr√©sorerie pr√©visionnelle**
9. **Synth√®se et conclusions financi√®res**

IMPORTANT: Int√©grer et commenter TOUS les tableaux financiers fournis.
Pour chaque tableau, fournir une analyse de 2-3 paragraphes.
Conclure chaque analyse par des recommandations concr√®tes.
""",
            "query": "Analyser en d√©tail tous les √©l√©ments financiers avec les tableaux"
        }
    }

def create_export_files(results: Dict[str, str], financial_tables: Dict[str, Any]):
    """Cr√©e les fichiers d'export (Word, PDF)"""
    
    st.subheader("üì• T√©l√©chargements")
    
    # Cr√©er le contenu complet
    complete_content = ""
    for section_name, content in results.items():
        complete_content += f"\n\n## {section_name}\n\n{content}"
    
    # Boutons de t√©l√©chargement
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÑ T√©l√©charger en Word"):
            try:
                # G√©n√©rer le document Word
                word_buffer = generate_word_document(results, financial_tables)
                st.download_button(
                    label="‚¨áÔ∏è T√©l√©charger Business Plan.docx",
                    data=word_buffer,
                    file_name="business_plan_complet.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration Word: {str(e)}")
    
    with col2:
        if st.button("üìë T√©l√©charger en PDF"):
            st.info("G√©n√©ration PDF en cours de d√©veloppement")

def generate_word_document(results: Dict[str, str], financial_tables: Dict[str, Any]):
    """G√©n√®re un document Word avec tous les contenus"""
    from docx import Document
    from io import BytesIO
    
    doc = Document()
    
    # Titre principal
    doc.add_heading('PLAN D\'AFFAIRES COMPLET', 0)
    
    # Ajouter chaque section
    for section_name, content in results.items():
        doc.add_heading(section_name, 1)
        
        # Traitement simple du contenu Markdown
        paragraphs = content.split('\n\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                doc.add_paragraph(paragraph.strip())
    
    # Sauvegarder en buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer.getvalue()

def process_uploaded_pdf(uploaded_file):
    """Traite un fichier PDF upload√©"""
    # √Ä impl√©menter si n√©cessaire
    return []
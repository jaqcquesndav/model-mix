"""
Pages financi√®res de base - Version simplifi√©e pour pr√©server le workflow
"""

import streamlit as st
from datetime import date

def page_informations_generales():
    """Page des informations g√©n√©rales - Version simplifi√©e"""
    st.title("‚ÑπÔ∏è Informations G√©n√©rales")
    st.info("‚ö†Ô∏è Cette page est en cours de migration vers la nouvelle architecture.")
    
    # Interface basique pour maintenir le workflow
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    if "informations_generales" not in st.session_state.data:
        st.session_state.data["informations_generales"] = {}
    
    info = st.session_state.data["informations_generales"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        info["prenom_nom"] = st.text_input("Pr√©nom et nom", value=info.get("prenom_nom", ""))
        info["intitule_projet"] = st.text_input("Intitul√© du projet", value=info.get("intitule_projet", ""))
        info["statut_juridique"] = st.selectbox("Statut juridique", 
                                               ["", "Entreprise individuelle", "SARL", "SAS", "SA"],
                                               index=0 if not info.get("statut_juridique") else 
                                               ["", "Entreprise individuelle", "SARL", "SAS", "SA"].index(info.get("statut_juridique")))
    
    with col2:
        info["telephone"] = st.text_input("T√©l√©phone", value=info.get("telephone", ""))
        info["email"] = st.text_input("Email", value=info.get("email", ""))
        info["ville"] = st.text_input("Ville", value=info.get("ville", ""))
    
    if st.button("üíæ Sauvegarder", type="primary"):
        st.success("Informations sauvegard√©es!")

def page_besoins_demarrage():
    """Page des besoins de d√©marrage - Version compl√®te selon l'original"""
    st.title("üí∞ Besoins de D√©marrage")
    st.markdown("### Formulaire complet des besoins d'investissement")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    if "besoins_demarrage" not in st.session_state.data:
        st.session_state.data["besoins_demarrage"] = {}
    
    besoins = st.session_state.data["besoins_demarrage"]
    
    # Liste compl√®te des 17 champs selon l'original
    besoins_items = [
        "Frais d'√©tablissement",
        "Frais d'ouverture de compteurs", 
        "Logiciels, formations",
        "D√©p√¥t de marque",
        "Droits d'entr√©e",
        "Achat fonds de commerce ou parts",
        "Droit au bail",
        "Enseigne et √©l√©ments de communication",
        "V√©hicule", 
        "Mat√©riel professionnel",
        "Mat√©riel autre",
        "Mat√©riel de bureau",
        "Stock de mati√®res et produits",
        "Caution ou d√©p√¥t de garantie",
        "Frais de dossier",
        "Frais de notaire",
        "Tr√©sorerie de d√©part"
    ]
    
    # Dur√©e d'amortissement
    st.subheader("Configuration des amortissements")
    duree_amortissement = st.number_input(
        "Dur√©e d'amortissement des investissements (en ann√©es) :",
        min_value=1,
        max_value=10,
        value=besoins.get("duree_amortissement", 3)
    )
    besoins["duree_amortissement"] = duree_amortissement
    st.session_state.data["duree_amortissement"] = duree_amortissement
    
    # Saisie des investissements en deux colonnes
    st.subheader("D√©tail des investissements")
    
    col1, col2 = st.columns(2)
    
    # R√©partition des champs en deux colonnes
    items_col1 = besoins_items[:9]  # 9 premiers champs
    items_col2 = besoins_items[9:]  # 8 derniers champs
    
    with col1:
        for item in items_col1:
            besoins[item] = st.number_input(
                f"{item} ($)", 
                value=besoins.get(item, 0.0), 
                min_value=0.0,
                key=f"besoin_{item}"
            )
    
    with col2:
        for item in items_col2:
            besoins[item] = st.number_input(
                f"{item} ($)", 
                value=besoins.get(item, 0.0), 
                min_value=0.0,
                key=f"besoin_{item}"
            )
    
    # Calculs des totaux par cat√©gorie
    st.write("---")
    st.subheader("R√©capitulatif des investissements")
    
    # Immobilisations incorporelles
    incorporels = [
        "Frais d'√©tablissement", "Logiciels, formations", "Droits d'entr√©e", 
        "Frais de dossier", "Frais de notaire"
    ]
    total_incorporels = sum(besoins.get(item, 0.0) for item in incorporels)
    
    # Immobilisations corporelles
    corporels = [
        "Enseigne et √©l√©ments de communication", "V√©hicule", 
        "Mat√©riel professionnel", "Mat√©riel autre", "Mat√©riel de bureau"
    ]
    total_corporels = sum(besoins.get(item, 0.0) for item in corporels)
    
    # Autres investissements
    autres = [
        "Frais d'ouverture de compteurs", "D√©p√¥t de marque", 
        "Achat fonds de commerce ou parts", "Droit au bail",
        "Stock de mati√®res et produits", "Caution ou d√©p√¥t de garantie", 
        "Tr√©sorerie de d√©part"
    ]
    total_autres = sum(besoins.get(item, 0.0) for item in autres)
    
    # Affichage des totaux
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Immobilisations incorporelles", f"{total_incorporels:,.2f} $")
    with col2:
        st.metric("Immobilisations corporelles", f"{total_corporels:,.2f} $")
    with col3:
        st.metric("Autres investissements", f"{total_autres:,.2f} $")
    
    # Total g√©n√©ral
    total_general = total_incorporels + total_corporels + total_autres
    st.session_state.data["total_besoins"] = total_general
    
    st.write("---")
    st.metric("**TOTAL G√âN√âRAL DES BESOINS**", f"{total_general:,.2f} $")
    
    # Sauvegarde des donn√©es
    st.session_state.data["besoins_demarrage"] = besoins

def calculer_pret_interet_fixe(montant, taux_annuel, duree_mois):
    """
    Calcule les d√©tails d'un pr√™t avec int√©r√™ts fixes par mois.
    
    Args:
        montant (float): Montant du pr√™t.
        taux_annuel (float): Taux annuel en pourcentage.
        duree_mois (int): Dur√©e du pr√™t en mois.
    
    Returns:
        dict: D√©tails du pr√™t.
    """
    if montant <= 0 or taux_annuel < 0:
        return {
            "mensualite": 0.0,
            "principal_mensuel": 0.0,
            "interet_mensuel": 0.0,
            "total_a_rembourser": 0.0,
            "interets_totaux": 0.0,
            "interets_annee1": 0.0,
            "interets_annee2": 0.0,
            "interets_annee3": 0.0
        }
    
    if duree_mois <= 0:
        return {
            "mensualite": 0.0,
            "principal_mensuel": 0.0,
            "interet_mensuel": 0.0,
            "total_a_rembourser": 0.0,
            "interets_totaux": 0.0,
            "interets_annee1": 0.0,
            "interets_annee2": 0.0,
            "interets_annee3": 0.0
        }
    
    taux_mensuel = taux_annuel / 100 / 12
    
    if taux_mensuel == 0:
        mensualite = montant / duree_mois
        interet_mensuel = 0.0
    else:
        mensualite = (taux_mensuel * montant) / (1 - (1 + taux_mensuel) ** (-duree_mois))
        interet_mensuel = montant * taux_mensuel
    
    principal_mensuel = montant / duree_mois
    
    total_a_rembourser = mensualite * duree_mois
    
    interets_totaux = interet_mensuel * duree_mois
    
    # Int√©r√™ts par ann√©e, limit√©s √† 12 mois maximum
    interets_annee1 = interet_mensuel * min(duree_mois, 12)
    interets_annee2 = interet_mensuel * min(max(duree_mois - 12, 0), 12)
    interets_annee3 = interet_mensuel * min(max(duree_mois - 24, 0), 12)
    
    return {
        "mensualite": mensualite,
        "principal_mensuel": principal_mensuel,
        "interet_mensuel": interet_mensuel,
        "total_a_rembourser": total_a_rembourser,
        "interets_totaux": interets_totaux,
        "interets_annee1": interets_annee1,
        "interets_annee2": interets_annee2,
        "interets_annee3": interets_annee3
    }

def page_financement():
    """Page de financement - Version compl√®te selon l'original"""
    st.title("üè¶ Financement")
    st.markdown("### Structure compl√®te de financement")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    if "financements" not in st.session_state.data:
        st.session_state.data["financements"] = {}
    
    fin = st.session_state.data["financements"]
    
    # Section 1: Apports personnels
    st.subheader("üí∞ Apports personnels")
    col1, col2 = st.columns(2)
    
    with col1:
        fin["Apport personnel ou familial"] = st.number_input(
            "Apport personnel ou familial ($)", 
            value=fin.get("Apport personnel ou familial", 0.0), 
            min_value=0.0
        )
    
    with col2:
        fin["Apports en nature (en valeur)"] = st.number_input(
            "Apports en nature (en valeur) ($)", 
            value=fin.get("Apports en nature (en valeur)", 0.0), 
            min_value=0.0
        )
    
    # Section 2: Emprunts (3 pr√™ts possibles)
    st.write("---")
    st.subheader("üè¶ Emprunts bancaires")
    
    total_emprunts = 0.0
    total_interets_annee1 = 0.0
    total_interets_annee2 = 0.0
    total_interets_annee3 = 0.0
    
    for i in range(1, 4):  # Pr√™t 1, 2, 3
        pret_name = f"Pr√™t {i}"
        
        st.markdown(f"**{pret_name}**")
        col1, col2, col3 = st.columns(3)
        
        # Initialiser la structure du pr√™t si elle n'existe pas
        if pret_name not in fin:
            fin[pret_name] = {"montant": 0.0, "taux": 0.0, "duree": 0}
        
        with col1:
            fin[pret_name]["montant"] = st.number_input(
                f"Montant du {pret_name} ($)",
                value=fin[pret_name].get("montant", 0.0),
                min_value=0.0,
                key=f"montant_pret_{i}"
            )
        
        with col2:
            fin[pret_name]["taux"] = st.number_input(
                f"Taux du {pret_name} (%)",
                value=fin[pret_name].get("taux", 0.0),
                min_value=0.0,
                max_value=50.0,
                key=f"taux_pret_{i}"
            )
        
        with col3:
            fin[pret_name]["duree"] = st.number_input(
                f"Dur√©e du {pret_name} (en mois)",
                value=fin[pret_name].get("duree", 0),
                min_value=0,
                max_value=300,
                key=f"duree_pret_{i}"
            )
        
        # Calculs du pr√™t
        if fin[pret_name]["montant"] > 0:
            pret_info = calculer_pret_interet_fixe(
                fin[pret_name]["montant"],
                fin[pret_name]["taux"],
                fin[pret_name]["duree"]
            )
            
            total_emprunts += fin[pret_name]["montant"]
            total_interets_annee1 += pret_info["interets_annee1"]
            total_interets_annee2 += pret_info["interets_annee2"]
            total_interets_annee3 += pret_info["interets_annee3"]
            
            # Affichage des d√©tails du pr√™t
            with st.expander(f"D√©tails du {pret_name}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"Mensualit√© : {pret_info['mensualite']:.2f} $")
                    st.write(f"Principal mensuel : {pret_info['principal_mensuel']:.2f} $")
                    st.write(f"Int√©r√™t mensuel : {pret_info['interet_mensuel']:.2f} $")
                
                with col2:
                    st.write(f"Total √† rembourser : {pret_info['total_a_rembourser']:.2f} $")
                    st.write(f"Int√©r√™ts totaux : {pret_info['interets_totaux']:.2f} $")
                
                st.write("**Int√©r√™ts par ann√©e :**")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.write(f"Ann√©e 1 : {pret_info['interets_annee1']:.2f} $")
                with col2:
                    st.write(f"Ann√©e 2 : {pret_info['interets_annee2']:.2f} $")
                with col3:
                    st.write(f"Ann√©e 3 : {pret_info['interets_annee3']:.2f} $")
    
    # Section 3: Subventions
    st.write("---")
    st.subheader("üéÅ Subventions")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Initialiser la structure de subvention si elle n'existe pas
        if "Subvention 1" not in fin:
            fin["Subvention 1"] = {"montant": 0.0}
        
        fin["Subvention 1"]["montant"] = st.number_input(
            "Subvention 1 ($)",
            value=fin["Subvention 1"].get("montant", 0.0),
            min_value=0.0
        )
    
    with col2:
        # Initialiser la structure de subvention si elle n'existe pas
        if "Subvention 2" not in fin:
            fin["Subvention 2"] = {"montant": 0.0}
        
        fin["Subvention 2"]["montant"] = st.number_input(
            "Subvention 2 ($)",
            value=fin["Subvention 2"].get("montant", 0.0),
            min_value=0.0
        )
    
    # Section 4: Autre financement
    st.write("---")
    st.subheader("üíº Autre financement")
    
    fin["Autre financement"] = st.number_input(
        "Autre financement ($)",
        value=fin.get("Autre financement", 0.0),
        min_value=0.0
    )
    
    # Calculs des totaux
    st.write("---")
    st.subheader("üìä R√©capitulatif du financement")
    
    total_apports = fin.get("Apport personnel ou familial", 0.0) + fin.get("Apports en nature (en valeur)", 0.0)
    total_subventions = fin["Subvention 1"].get("montant", 0.0) + fin["Subvention 2"].get("montant", 0.0)
    total_autres = fin.get("Autre financement", 0.0)
    total_financement = total_apports + total_emprunts + total_subventions + total_autres
    
    # Stockage des totaux pour utilisation dans d'autres pages
    fin["total_apports"] = total_apports
    fin["total_emprunts"] = total_emprunts
    fin["total_subventions"] = total_subventions
    fin["total_autres"] = total_autres
    fin["total_financement"] = total_financement
    fin["total_interets_annee1"] = total_interets_annee1
    fin["total_interets_annee2"] = total_interets_annee2
    fin["total_interets_annee3"] = total_interets_annee3
    
    # Affichage des totaux
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Apports personnels", f"{total_apports:,.2f} $")
    with col2:
        st.metric("Emprunts", f"{total_emprunts:,.2f} $")
    with col3:
        st.metric("Subventions", f"{total_subventions:,.2f} $")
    with col4:
        st.metric("Autres", f"{total_autres:,.2f} $")
    
    st.write("---")
    st.metric("**TOTAL FINANCEMENT**", f"{total_financement:,.2f} $")
    
    # Comparaison avec les besoins
    total_besoins = st.session_state.data.get("total_besoins", 0.0)
    if total_besoins > 0:
        ecart = total_financement - total_besoins
        if ecart >= 0:
            st.success(f"‚úÖ Financement suffisant : Exc√©dent de {ecart:,.2f} $")
        else:
            st.error(f"‚ùå Financement insuffisant : D√©ficit de {abs(ecart):,.2f} $")
    
    # Sauvegarde des donn√©es
    st.session_state.data["financements"] = fin

def page_charges_fixes():
    """Page des charges fixes - Version compl√®te avec autofill intelligent sur 5 ans"""
    st.title("üìã Charges Fixes sur 5 Ann√©es")
    st.markdown("### Syst√®me d'autofill intelligent - Modifiez ann√©e 1 pour auto-remplir ann√©es 2 √† 5")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # Liste compl√®te des 15 charges fixes selon l'original
    charges_fixes_predefinies = [
        "Assurances v√©hicule et RC pro", "T√©l√©phone, internet", "Autres abonnements",
        "Carburant", "Frais de d√©placement / h√©bergement", "Eau, √©lectricit√©, gaz",
        "Mutuelle", "Fournitures diverses", "Entretien Moto livraison et mat√©riel",
        "Nettoyage des locaux", "Budget publicit√© et communication", "Emplacements",
        "Expert comptable, avocats", "Frais bancaires et terminal carte bleue", "Taxes, CFE"
    ]
    
    # Initialisation des charges fixes si non pr√©sentes
    if "charges_fixes" not in data:
        data["charges_fixes"] = {"annee1": {}, "annee2": {}, "annee3": {}, "annee4": {}, "annee5": {}}
        for charge in charges_fixes_predefinies:
            for annee in ["annee1", "annee2", "annee3", "annee4", "annee5"]:
                data["charges_fixes"][annee][charge] = 0.0
    
    charges_fixes_dict = data["charges_fixes"]
    
    # Fonctions d'autofill intelligent
    def update_year1(charge):
        """Met √† jour ann√©es 2 √† 5 quand ann√©e 1 change"""
        year1_key = f"charge_{charge}_annee1"
        year1_val = st.session_state.get(year1_key, 0.0)
        
        # Auto-remplir ann√©es 2 √† 5 avec la valeur de l'ann√©e 1
        for i, annee in enumerate(["annee2", "annee3", "annee4", "annee5"], 2):
            year_key = f"charge_{charge}_annee{i}"
            if not st.session_state.get(f"updated_{year_key}", False):
                st.session_state[year_key] = year1_val
                charges_fixes_dict[annee][charge] = year1_val
    
    def update_year2(charge):
        """Met √† jour ann√©es 3 √† 5 quand ann√©e 2 change"""
        year2_key = f"charge_{charge}_annee2"
        year2_val = st.session_state.get(year2_key, 0.0)
        st.session_state[f"updated_{year2_key}"] = True
        
        for i, annee in enumerate(["annee3", "annee4", "annee5"], 3):
            year_key = f"charge_{charge}_annee{i}"
            if not st.session_state.get(f"updated_{year_key}", False):
                st.session_state[year_key] = year2_val
                charges_fixes_dict[annee][charge] = year2_val
    
    def update_year3(charge):
        """Met √† jour ann√©es 4 et 5 quand ann√©e 3 change"""
        year3_key = f"charge_{charge}_annee3"
        year3_val = st.session_state.get(year3_key, 0.0)
        st.session_state[f"updated_{year3_key}"] = True
        
        for i, annee in enumerate(["annee4", "annee5"], 4):
            year_key = f"charge_{charge}_annee{i}"
            if not st.session_state.get(f"updated_{year_key}", False):
                st.session_state[year_key] = year3_val
                charges_fixes_dict[annee][charge] = year3_val
    
    def update_year4(charge):
        """Met √† jour ann√©e 5 quand ann√©e 4 change"""
        year4_key = f"charge_{charge}_annee4"
        year4_val = st.session_state.get(year4_key, 0.0)
        st.session_state[f"updated_{year4_key}"] = True
        
        year5_key = f"charge_{charge}_annee5"
        if not st.session_state.get(f"updated_{year5_key}", False):
            st.session_state[year5_key] = year4_val
            charges_fixes_dict["annee5"][charge] = year4_val
    
    def update_year5(charge):
        """Marque l'ann√©e 5 comme modifi√©e manuellement"""
        year5_key = f"charge_{charge}_annee5"
        st.session_state[f"updated_{year5_key}"] = True
    
    # Interface pour les charges fixes pr√©d√©finies
    st.subheader("üíº Charges Fixes Pr√©d√©finies")
    st.info("üí° **Autofill intelligent** : Modifiez l'ann√©e 1 pour auto-remplir les ann√©es suivantes")
    
    # Affichage en format tableau avec 5 colonnes
    for charge in charges_fixes_predefinies:
        st.markdown(f"**{charge}**")
        col1, col2, col3, col4, col5 = st.columns(5)
        
        # S'assurer que la charge existe dans toutes les ann√©es
        for annee in ["annee1", "annee2", "annee3", "annee4", "annee5"]:
            if charge not in charges_fixes_dict[annee]:
                charges_fixes_dict[annee][charge] = 0.0
        
        with col1:
            year1_key = f"charge_{charge}_annee1"
            if year1_key not in st.session_state:
                st.session_state[year1_key] = charges_fixes_dict["annee1"].get(charge, 0.0)
            montant1 = st.number_input(
                f"Ann√©e 1 ($)",
                min_value=0.0,
                key=year1_key,
                on_change=update_year1,
                args=(charge,),
                value=st.session_state[year1_key]
            )
            charges_fixes_dict["annee1"][charge] = montant1
        
        with col2:
            year2_key = f"charge_{charge}_annee2"
            if year2_key not in st.session_state:
                st.session_state[year2_key] = charges_fixes_dict["annee2"].get(charge, 0.0)
            montant2 = st.number_input(
                f"Ann√©e 2 ($)",
                min_value=0.0,
                key=year2_key,
                on_change=update_year2,
                args=(charge,),
                value=st.session_state[year2_key]
            )
            charges_fixes_dict["annee2"][charge] = montant2
        
        with col3:
            year3_key = f"charge_{charge}_annee3"
            if year3_key not in st.session_state:
                st.session_state[year3_key] = charges_fixes_dict["annee3"].get(charge, 0.0)
            montant3 = st.number_input(
                f"Ann√©e 3 ($)",
                min_value=0.0,
                key=year3_key,
                on_change=update_year3,
                args=(charge,),
                value=st.session_state[year3_key]
            )
            charges_fixes_dict["annee3"][charge] = montant3
        
        with col4:
            year4_key = f"charge_{charge}_annee4"
            if year4_key not in st.session_state:
                st.session_state[year4_key] = charges_fixes_dict["annee4"].get(charge, 0.0)
            montant4 = st.number_input(
                f"Ann√©e 4 ($)",
                min_value=0.0,
                key=year4_key,
                on_change=update_year4,
                args=(charge,),
                value=st.session_state[year4_key]
            )
            charges_fixes_dict["annee4"][charge] = montant4
        
        with col5:
            year5_key = f"charge_{charge}_annee5"
            if year5_key not in st.session_state:
                st.session_state[year5_key] = charges_fixes_dict["annee5"].get(charge, 0.0)
            montant5 = st.number_input(
                f"Ann√©e 5 ($)",
                min_value=0.0,
                key=year5_key,
                on_change=update_year5,
                args=(charge,),
                value=st.session_state[year5_key]
            )
            charges_fixes_dict["annee5"][charge] = montant5
    
    # Section charges fixes personnalis√©es
    st.subheader("‚ûï Charges Fixes Personnalis√©es")
    st.info("Ajoutez vos propres charges fixes non list√©es ci-dessus")
    
    # Initialiser les charges personnalis√©es si n√©cessaire
    if "charges_personnalisees" not in data:
        data["charges_personnalisees"] = []
    
    # Interface pour ajouter une nouvelle charge personnalis√©e
    with st.expander("üÜï Ajouter une nouvelle charge fixe"):
        col_nom, col_add = st.columns([3, 1])
        with col_nom:
            nouvelle_charge = st.text_input("Nom de la nouvelle charge fixe")
        with col_add:
            st.write("")  # Espacement
            if st.button("Ajouter"):
                if nouvelle_charge and nouvelle_charge not in data["charges_personnalisees"]:
                    data["charges_personnalisees"].append(nouvelle_charge)
                    # Initialiser les valeurs pour toutes les ann√©es
                    for annee in ["annee1", "annee2", "annee3", "annee4", "annee5"]:
                        charges_fixes_dict[annee][nouvelle_charge] = 0.0
                    st.success(f"Charge '{nouvelle_charge}' ajout√©e !")
                    st.rerun()
                elif nouvelle_charge in data["charges_personnalisees"]:
                    st.warning("Cette charge existe d√©j√†")
    
    # Afficher les charges personnalis√©es existantes
    if data["charges_personnalisees"]:
        st.markdown("**Charges personnalis√©es :**")
        for i, charge in enumerate(data["charges_personnalisees"]):
            col_charge, col_delete = st.columns([10, 1])
            
            with col_charge:
                st.markdown(f"**{charge}**")
                col1, col2, col3, col4, col5 = st.columns(5)
                
                # S'assurer que la charge existe dans toutes les ann√©es
                for annee in ["annee1", "annee2", "annee3", "annee4", "annee5"]:
                    if charge not in charges_fixes_dict[annee]:
                        charges_fixes_dict[annee][charge] = 0.0
                
                with col1:
                    year1_key = f"charge_perso_{charge}_annee1"
                    if year1_key not in st.session_state:
                        st.session_state[year1_key] = charges_fixes_dict["annee1"].get(charge, 0.0)
                    montant1 = st.number_input(
                        f"Ann√©e 1 ($)",
                        min_value=0.0,
                        key=year1_key,
                        on_change=update_year1,
                        args=(charge,),
                        value=st.session_state[year1_key]
                    )
                    charges_fixes_dict["annee1"][charge] = montant1
                
                with col2:
                    year2_key = f"charge_perso_{charge}_annee2"
                    if year2_key not in st.session_state:
                        st.session_state[year2_key] = charges_fixes_dict["annee2"].get(charge, 0.0)
                    montant2 = st.number_input(
                        f"Ann√©e 2 ($)",
                        min_value=0.0,
                        key=year2_key,
                        on_change=update_year2,
                        args=(charge,),
                        value=st.session_state[year2_key]
                    )
                    charges_fixes_dict["annee2"][charge] = montant2
                
                with col3:
                    year3_key = f"charge_perso_{charge}_annee3"
                    if year3_key not in st.session_state:
                        st.session_state[year3_key] = charges_fixes_dict["annee3"].get(charge, 0.0)
                    montant3 = st.number_input(
                        f"Ann√©e 3 ($)",
                        min_value=0.0,
                        key=year3_key,
                        on_change=update_year3,
                        args=(charge,),
                        value=st.session_state[year3_key]
                    )
                    charges_fixes_dict["annee3"][charge] = montant3
                
                with col4:
                    year4_key = f"charge_perso_{charge}_annee4"
                    if year4_key not in st.session_state:
                        st.session_state[year4_key] = charges_fixes_dict["annee4"].get(charge, 0.0)
                    montant4 = st.number_input(
                        f"Ann√©e 4 ($)",
                        min_value=0.0,
                        key=year4_key,
                        on_change=update_year4,
                        args=(charge,),
                        value=st.session_state[year4_key]
                    )
                    charges_fixes_dict["annee4"][charge] = montant4
                
                with col5:
                    year5_key = f"charge_perso_{charge}_annee5"
                    if year5_key not in st.session_state:
                        st.session_state[year5_key] = charges_fixes_dict["annee5"].get(charge, 0.0)
                    montant5 = st.number_input(
                        f"Ann√©e 5 ($)",
                        min_value=0.0,
                        key=year5_key,
                        on_change=update_year5,
                        args=(charge,),
                        value=st.session_state[year5_key]
                    )
                    charges_fixes_dict["annee5"][charge] = montant5
            
            with col_delete:
                st.write("")  # Espacement
                if st.button("üóëÔ∏è", key=f"delete_charge_{i}", help="Supprimer cette charge"):
                    # Supprimer la charge des listes et des donn√©es
                    data["charges_personnalisees"].remove(charge)
                    for annee in ["annee1", "annee2", "annee3", "annee4", "annee5"]:
                        if charge in charges_fixes_dict[annee]:
                            del charges_fixes_dict[annee][charge]
                    st.success(f"Charge '{charge}' supprim√©e !")
                    st.rerun()
    
    # Calculs et r√©sum√©
    st.subheader("üìä R√©sum√© des Charges Fixes")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    totaux_annuels = {}
    
    for i, (annee, col) in enumerate(zip(["annee1", "annee2", "annee3", "annee4", "annee5"], [col1, col2, col3, col4, col5]), 1):
        total = sum(charges_fixes_dict[annee].values())
        totaux_annuels[annee] = total
        
        with col:
            st.metric(f"Ann√©e {i}", f"{total:,.0f} $")
    
    # √âvolution et moyennes
    st.subheader("üìà Analyse d'√âvolution")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        moyenne_5_ans = sum(totaux_annuels.values()) / 5
        st.metric("Moyenne 5 ans", f"{moyenne_5_ans:,.0f} $")
    
    with col2:
        if totaux_annuels["annee1"] > 0:
            croissance = ((totaux_annuels["annee5"] / totaux_annuels["annee1"]) - 1) * 100
            st.metric("Croissance totale", f"{croissance:+.1f}%")
        else:
            st.metric("Croissance totale", "N/A")
    
    with col3:
        max_annee = max(totaux_annuels.values())
        st.metric("Pic maximal", f"{max_annee:,.0f} $")
    
    # Sauvegarder les totaux pour les autres calculs
    for i, annee in enumerate(["annee1", "annee2", "annee3", "annee4", "annee5"], 1):
        data[f"total_charges_fixes_annee{i}"] = totaux_annuels[annee]

def page_chiffre_affaires():
    """Page de chiffre d'affaires - Version compl√®te avec autofill mensuel"""
    st.title("üìà Chiffre d'Affaires Pr√©visionnel")
    st.markdown("### Saisie mensuelle avec autofill intelligent sur 12 mois")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # Type de vente depuis les informations g√©n√©rales
    type_vente = data.get("informations_generales", {}).get("type_vente", "Marchandises")
    
    if "chiffre_affaires" not in data:
        data["chiffre_affaires"] = {}
    
    chiffre_affaires_dict = data["chiffre_affaires"]
    
    # S√©lection du type de vente
    st.subheader("üéØ Configuration du type d'activit√©")
    type_vente = st.selectbox(
        "Type de vente",
        ["Marchandises", "Services", "Mixte"],
        index=["Marchandises", "Services", "Mixte"].index(type_vente) if type_vente in ["Marchandises", "Services", "Mixte"] else 0
    )
    
    # Sauvegarder le type de vente
    if "informations_generales" not in data:
        data["informations_generales"] = {}
    data["informations_generales"]["type_vente"] = type_vente
    
    mois = [f"Mois {i}" for i in range(1, 13)]
    
    # Fonctions de mise √† jour avec autofill intelligent
    def update_jours_travailles(nom_vente):
        """Auto-remplit les jours travaill√©s des mois 2-12 avec la valeur du mois 1"""
        key_jours_mois1 = f"{nom_vente}_Mois 1_jours"
        new_val = st.session_state.get(key_jours_mois1, 0)
        for mois_nom in mois[1:]:
            key = f"{nom_vente}_{mois_nom}_jours"
            if not st.session_state.get(f"updated_{key}", False):
                st.session_state[key] = new_val
                chiffre_affaires_dict[key] = new_val

    def update_ca_moyen_jour(nom_vente):
        """Auto-remplit le CA moyen/jour des mois 2-12 avec la valeur du mois 1"""
        key_ca_mois1 = f"{nom_vente}_Mois 1_ca_moyen"
        new_val = st.session_state.get(key_ca_mois1, 0.0)
        for mois_nom in mois[1:]:
            key = f"{nom_vente}_{mois_nom}_ca_moyen"
            if not st.session_state.get(f"updated_{key}", False):
                st.session_state[key] = new_val
                chiffre_affaires_dict[key] = new_val

    def mark_updated(key):
        """Marque un champ comme modifi√© manuellement"""
        st.session_state[f"updated_{key}"] = True

    def calcul_chiffre_affaires(nom_vente):
        """Calcule le chiffre d'affaires pour un type de vente donn√©"""
        data_ca = []
        
        st.subheader(f"üìä {nom_vente} - R√©partition mensuelle Ann√©e 1")
        st.info("üí° Saisissez les donn√©es du Mois 1, les autres mois se rempliront automatiquement. Modifiez individuellement si n√©cessaire.")
        
        # En-t√™tes du tableau
        col1, col2, col3, col4 = st.columns([2, 2, 2, 2])
        with col1:
            st.write("**Mois**")
        with col2:
            st.write("**Jours travaill√©s**")
        with col3:
            st.write("**CA moyen/jour ($)**")
        with col4:
            st.write("**CA mensuel ($)**")
        
        st.write("---")
        
        for mois_nom in mois:
            col1, col2, col3, col4 = st.columns([2, 2, 2, 2])
            
            key_jours = f"{nom_vente}_{mois_nom}_jours"
            key_ca_moyen = f"{nom_vente}_{mois_nom}_ca_moyen"
            key_ca = f"{nom_vente}_{mois_nom}_ca"
            
            with col1:
                st.write(f"**{mois_nom}**")
            
            with col2:
                if mois_nom == "Mois 1":
                    # Mois 1 : d√©clenche l'autofill
                    montant_jours = st.number_input(
                        f"Jours {mois_nom}",
                        min_value=0,
                        key=key_jours,
                        value=chiffre_affaires_dict.get(key_jours, 0),
                        on_change=update_jours_travailles,
                        args=(nom_vente,),
                        label_visibility="collapsed"
                    )
                else:
                    # Mois 2-12 : peut √™tre modifi√© individuellement
                    montant_jours = st.number_input(
                        f"Jours {mois_nom}",
                        min_value=0,
                        key=key_jours,
                        value=chiffre_affaires_dict.get(key_jours, 0),
                        on_change=lambda key=key_jours: mark_updated(key),
                        label_visibility="collapsed"
                    )
                chiffre_affaires_dict[key_jours] = montant_jours
            
            with col3:
                if mois_nom == "Mois 1":
                    # Mois 1 : d√©clenche l'autofill
                    montant_ca_moyen = st.number_input(
                        f"CA moyen {mois_nom}",
                        min_value=0.0,
                        key=key_ca_moyen,
                        value=chiffre_affaires_dict.get(key_ca_moyen, 0.0),
                        on_change=update_ca_moyen_jour,
                        args=(nom_vente,),
                        label_visibility="collapsed"
                    )
                else:
                    # Mois 2-12 : peut √™tre modifi√© individuellement
                    montant_ca_moyen = st.number_input(
                        f"CA moyen {mois_nom}",
                        min_value=0.0,
                        key=key_ca_moyen,
                        value=chiffre_affaires_dict.get(key_ca_moyen, 0.0),
                        on_change=lambda key=key_ca_moyen: mark_updated(key),
                        label_visibility="collapsed"
                    )
                chiffre_affaires_dict[key_ca_moyen] = montant_ca_moyen
            
            # Calcul automatique du CA mensuel
            ca_mensuel = montant_jours * montant_ca_moyen
            chiffre_affaires_dict[key_ca] = ca_mensuel
            
            with col4:
                st.metric("", f"{ca_mensuel:,.2f}")
            
            data_ca.append({
                "mois": mois_nom,
                "jours_travailles": montant_jours,
                "ca_moyen_jour": montant_ca_moyen,
                "ca_mensuel": ca_mensuel
            })
        
        # Calcul du total ann√©e 1
        total_ca_annee1 = sum(item["ca_mensuel"] for item in data_ca)
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee1"] = total_ca_annee1
        
        st.write("---")
        st.metric(f"**Total Chiffre d'Affaires Ann√©e 1 ({nom_vente})**", f"{total_ca_annee1:,.2f} $")
        
        # Pourcentages d'augmentation pour les ann√©es 2 et 3
        st.subheader(f"üìà Projections Ann√©es 2 √† 5 - {nom_vente}")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            key_aug_annee2 = f"{nom_vente}_augmentation_annee2"
            pourcentage_augmentation_annee2 = st.number_input(
                f"Augmentation CA Ann√©e 1 ‚Üí 2 (%) - {nom_vente}",
                min_value=-50.0,
                max_value=500.0,
                value=chiffre_affaires_dict.get(key_aug_annee2, 10.0),
                key=key_aug_annee2
            )
            chiffre_affaires_dict[key_aug_annee2] = pourcentage_augmentation_annee2
        
        with col2:
            key_aug_annee3 = f"{nom_vente}_augmentation_annee3"
            pourcentage_augmentation_annee3 = st.number_input(
                f"Augmentation CA Ann√©e 2 ‚Üí 3 (%) - {nom_vente}",
                min_value=-50.0,
                max_value=500.0,
                value=chiffre_affaires_dict.get(key_aug_annee3, 10.0),
                key=key_aug_annee3
            )
            chiffre_affaires_dict[key_aug_annee3] = pourcentage_augmentation_annee3
        
        with col3:
            key_aug_annee4 = f"{nom_vente}_augmentation_annee4"
            pourcentage_augmentation_annee4 = st.number_input(
                f"Augmentation CA Ann√©e 3 ‚Üí 4 (%) - {nom_vente}",
                min_value=-50.0,
                max_value=500.0,
                value=chiffre_affaires_dict.get(key_aug_annee4, 10.0),
                key=key_aug_annee4
            )
            chiffre_affaires_dict[key_aug_annee4] = pourcentage_augmentation_annee4
        
        with col4:
            key_aug_annee5 = f"{nom_vente}_augmentation_annee5"
            pourcentage_augmentation_annee5 = st.number_input(
                f"Augmentation CA Ann√©e 4 ‚Üí 5 (%) - {nom_vente}",
                min_value=-50.0,
                max_value=500.0,
                value=chiffre_affaires_dict.get(key_aug_annee5, 10.0),
                key=key_aug_annee5
            )
            chiffre_affaires_dict[key_aug_annee5] = pourcentage_augmentation_annee5
        
        # Calculs des ann√©es 2 √† 5
        total_ca_annee2 = total_ca_annee1 * (1 + pourcentage_augmentation_annee2 / 100)
        total_ca_annee3 = total_ca_annee2 * (1 + pourcentage_augmentation_annee3 / 100)
        total_ca_annee4 = total_ca_annee3 * (1 + pourcentage_augmentation_annee4 / 100)
        total_ca_annee5 = total_ca_annee4 * (1 + pourcentage_augmentation_annee5 / 100)
        
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee2"] = total_ca_annee2
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee3"] = total_ca_annee3
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee4"] = total_ca_annee4
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee5"] = total_ca_annee5
        
        # Affichage des projections
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(f"CA Ann√©e 2 ({nom_vente})", f"{total_ca_annee2:,.2f} $")
        with col2:
            st.metric(f"CA Ann√©e 3 ({nom_vente})", f"{total_ca_annee3:,.2f} $")
        with col3:
            st.metric(f"CA Ann√©e 4 ({nom_vente})", f"{total_ca_annee4:,.2f} $")
        with col4:
            st.metric(f"CA Ann√©e 5 ({nom_vente})", f"{total_ca_annee5:,.2f} $")
        
        return total_ca_annee1, total_ca_annee2, total_ca_annee3, total_ca_annee4, total_ca_annee5
    
    # Interface selon le type de vente s√©lectionn√©
    totaux_marchandises = [0, 0, 0, 0, 0]
    totaux_services = [0, 0, 0, 0, 0]
    
    if type_vente in ["Marchandises", "Mixte"]:
        totaux_marchandises = calcul_chiffre_affaires("Marchandises")
        st.write("---")
    
    if type_vente in ["Services", "Mixte"]:
        totaux_services = calcul_chiffre_affaires("Services")
        st.write("---")
    
    # Calcul des totaux g√©n√©raux
    total_ca_annee1 = totaux_marchandises[0] + totaux_services[0]
    total_ca_annee2 = totaux_marchandises[1] + totaux_services[1]
    total_ca_annee3 = totaux_marchandises[2] + totaux_services[2]
    total_ca_annee4 = totaux_marchandises[3] + totaux_services[3]
    total_ca_annee5 = totaux_marchandises[4] + totaux_services[4]
    
    # Sauvegarde des totaux g√©n√©raux
    data["total_chiffre_affaires_annee1"] = total_ca_annee1
    data["total_chiffre_affaires_annee2"] = total_ca_annee2
    data["total_chiffre_affaires_annee3"] = total_ca_annee3
    data["total_chiffre_affaires_annee4"] = total_ca_annee4
    data["total_chiffre_affaires_annee5"] = total_ca_annee5
    
    # Affichage du r√©capitulatif final
    if type_vente == "Mixte":
        st.subheader("üéØ R√©capitulatif Global")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("Total CA Ann√©e 1", f"{total_ca_annee1:,.2f} $")
        with col2:
            st.metric("Total CA Ann√©e 2", f"{total_ca_annee2:,.2f} $")
        with col3:
            st.metric("Total CA Ann√©e 3", f"{total_ca_annee3:,.2f} $")
        with col4:
            st.metric("Total CA Ann√©e 4", f"{total_ca_annee4:,.2f} $")
        with col5:
            st.metric("Total CA Ann√©e 5", f"{total_ca_annee5:,.2f} $")
        
        # R√©partition Marchandises vs Services
        if total_ca_annee1 > 0:
            pct_marchandises = (totaux_marchandises[0] / total_ca_annee1) * 100
            pct_services = (totaux_services[0] / total_ca_annee1) * 100
            
            st.write("**R√©partition Ann√©e 1 :**")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"üõçÔ∏è Marchandises : {pct_marchandises:.1f}%")
            with col2:
                st.write(f"üîß Services : {pct_services:.1f}%")
    
    # Sauvegarde des donn√©es
    st.session_state.data = data

def page_tresorerie():
    """Page de tr√©sorerie - Gestion des flux de tr√©sorerie sur 5 ans"""
    st.title("üí∞ Plan de Tr√©sorerie")
    st.markdown("### Suivi des flux de tr√©sorerie sur 5 ann√©es")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # V√©rifier que les donn√©es financi√®res de base sont disponibles
    ca_disponible = any(f"total_ca_annee{i}" in data for i in range(1, 6))
    charges_fixes_disponibles = any(f"total_charges_fixes_annee{i}" in data for i in range(1, 6))
    
    if not ca_disponible or not charges_fixes_disponibles:
        st.warning("‚ö†Ô∏è Veuillez d'abord renseigner le chiffre d'affaires et les charges fixes pour calculer la tr√©sorerie.")
        return
    
    # Initialisation des donn√©es de tr√©sorerie
    if "tresorerie" not in data:
        data["tresorerie"] = {
            "tresorerie_initiale": 0.0,
            "annee1": {}, "annee2": {}, "annee3": {}, "annee4": {}, "annee5": {}
        }
    
    tresorerie_dict = data["tresorerie"]
    
    # Tr√©sorerie initiale
    st.subheader("üíµ Tr√©sorerie de D√©part")
    tresorerie_initiale = st.number_input(
        "Tr√©sorerie initiale ($)",
        value=tresorerie_dict.get("tresorerie_initiale", 0.0),
        min_value=0.0,
        help="Montant de tr√©sorerie disponible au d√©but de l'activit√©"
    )
    tresorerie_dict["tresorerie_initiale"] = tresorerie_initiale
    
    # Calculs par ann√©e
    st.subheader("üìä √âvolution de la Tr√©sorerie")
    
    # Tableau r√©capitulatif
    col1, col2, col3, col4, col5 = st.columns(5)
    columns = [col1, col2, col3, col4, col5]
    
    tresorerie_cumulative = tresorerie_initiale
    resultats_tresorerie = []
    
    for i, col in enumerate(columns, 1):
        annee = f"annee{i}"
        
        # R√©cup√©ration des donn√©es existantes
        ca_annuel = data.get(f"total_ca_annee{i}", 0.0)
        charges_fixes = data.get(f"total_charges_fixes_annee{i}", 0.0)
        charges_variables = data.get(f"total_charges_variables_annee{i}", 0.0)
        salaires = data.get(f"total_salaires_annee{i}", 0.0)
        
        # Calcul du r√©sultat net
        total_charges = charges_fixes + charges_variables + salaires
        resultat_net = ca_annuel - total_charges
        
        # Mise √† jour de la tr√©sorerie cumulative
        tresorerie_cumulative += resultat_net
        
        # Stockage pour affichage
        resultats_tresorerie.append({
            "annee": i,
            "ca": ca_annuel,
            "charges_totales": total_charges,
            "resultat_net": resultat_net,
            "tresorerie_cumulative": tresorerie_cumulative
        })
        
        # Affichage dans la colonne
        with col:
            st.metric(f"Ann√©e {i}", f"{tresorerie_cumulative:,.0f} $")
            
            # Indicateur de couleur selon le niveau
            if tresorerie_cumulative < 0:
                st.error("üî¥ D√©ficit")
            elif tresorerie_cumulative < 10000:
                st.warning("üü° Faible")
            else:
                st.success("üü¢ Bonne")
    
    # Tableau d√©taill√©
    st.subheader("üìà D√©tail des Flux de Tr√©sorerie")
    
    # Cr√©er un DataFrame pour l'affichage
    import pandas as pd
    
    tableau_data = []
    tresorerie_debut = tresorerie_initiale
    
    for result in resultats_tresorerie:
        tableau_data.append({
            "Ann√©e": result["annee"],
            "Tr√©sorerie d√©but": f"{tresorerie_debut:,.0f} $",
            "Chiffre d'affaires": f"{result['ca']:,.0f} $",
            "Charges totales": f"{result['charges_totales']:,.0f} $",
            "R√©sultat net": f"{result['resultat_net']:,.0f} $",
            "Tr√©sorerie fin": f"{result['tresorerie_cumulative']:,.0f} $"
        })
        tresorerie_debut = result['tresorerie_cumulative']
    
    df = pd.DataFrame(tableau_data)
    st.dataframe(df, use_container_width=True)
    
    # Analyse et conseils
    st.subheader("üí° Analyse de Tr√©sorerie")
    
    # V√©rification des points critiques
    tresorerie_minimale = min([r["tresorerie_cumulative"] for r in resultats_tresorerie])
    annee_minimale = next(r["annee"] for r in resultats_tresorerie if r["tresorerie_cumulative"] == tresorerie_minimale)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Tr√©sorerie minimale", f"{tresorerie_minimale:,.0f} $")
        if tresorerie_minimale < 0:
            st.error(f"‚ö†Ô∏è D√©ficit en ann√©e {annee_minimale}")
    
    with col2:
        tresorerie_finale = resultats_tresorerie[-1]["tresorerie_cumulative"]
        st.metric("Tr√©sorerie finale (Ann√©e 5)", f"{tresorerie_finale:,.0f} $")
    
    with col3:
        if tresorerie_finale > tresorerie_initiale:
            croissance_tresorerie = ((tresorerie_finale / tresorerie_initiale) - 1) * 100 if tresorerie_initiale > 0 else 0
            st.metric("Croissance sur 5 ans", f"{croissance_tresorerie:+.1f}%")
        else:
            st.metric("√âvolution", "D√©croissance")
    
    # Conseils automatiques
    if tresorerie_minimale < 0:
        st.error("üö® **Alerte Tr√©sorerie** : Votre projet pr√©sente des d√©ficits de tr√©sorerie. Consid√©rez :")
        st.write("‚Ä¢ Augmenter la tr√©sorerie initiale")
        st.write("‚Ä¢ R√©duire les charges fixes")
        st.write("‚Ä¢ Augmenter le chiffre d'affaires")
        st.write("‚Ä¢ Rechercher des financements compl√©mentaires")
    elif tresorerie_minimale < 10000:
        st.warning("‚ö†Ô∏è **Vigilance** : Tr√©sorerie faible certaines ann√©es. Pr√©voyez une marge de s√©curit√©.")
    else:
        st.success("‚úÖ **Bonne sant√© financi√®re** : Votre tr√©sorerie reste positive sur toute la p√©riode.")
    
    # Sauvegarde des r√©sultats
    for i, result in enumerate(resultats_tresorerie, 1):
        data[f"tresorerie_annee{i}"] = result["tresorerie_cumulative"]
        data[f"resultat_net_annee{i}"] = result["resultat_net"]

def page_charges_variables():
    """Page des charges variables - Version simplifi√©e"""
    st.title("üìä Charges Variables")
    st.info("‚ö†Ô∏è Version simplifi√©e - Donn√©es sur 3 ans.")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    if "charges_variables" not in data:
        data["charges_variables"] = {}
    
    cv = data["charges_variables"]
    
    st.subheader("Charges variables (en % du CA)")
    
    charges_types = ["Achat marchandises", "Commissions", "Transport", "Autres charges variables"]
    
    for charge in charges_types:
        cv[charge] = st.number_input(f"{charge} (% du CA)", 
                                   value=cv.get(charge, 0.0), min_value=0.0, max_value=100.0, key=f"cv_{charge}")
    
    # Calcul du taux total
    taux_total = sum(cv.values())
    st.metric("Taux total charges variables", f"{taux_total:.1f}%")
    
    # Sauvegarder le taux pour les autres calculs
    data["taux_charges_variables"] = taux_total

def page_fonds_roulement():
    """Page du fonds de roulement - Version simplifi√©e"""
    st.title("üíº Fonds de Roulement")
    st.info("‚ö†Ô∏è Version simplifi√©e - Calculs automatiques.")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # Calcul automatique bas√© sur le CA
    ca_annuel = data.get("total_ca_annee1", 0.0)
    
    if ca_annuel > 0:
        # Estimation du BFR √† 10% du CA (r√®gle simplifi√©e)
        bfr_estime = ca_annuel * 0.10
        
        st.subheader("Estimation du Besoin en Fonds de Roulement")
        st.metric("BFR estim√© (10% du CA)", f"{bfr_estime:,.0f} $")
        
        data["fonds_roulement"] = bfr_estime
    else:
        st.warning("Veuillez d'abord renseigner le chiffre d'affaires.")

def page_salaires():
    """Page des salaires - Version simplifi√©e"""
    st.title("üë• Salaires")
    st.info("‚ö†Ô∏è Version simplifi√©e - Donn√©es sur 3 ans.")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    if "salaires" not in st.session_state.data:
        st.session_state.data["salaires"] = {}
    
    salaires = st.session_state.data["salaires"]
    
    st.subheader("Salaires mensuels bruts")
    
    postes = ["Dirigeant", "Employ√© 1", "Employ√© 2"]
    
    total_mensuel = 0
    for poste in postes:
        if poste not in salaires:
            salaires[poste] = {}
        
        col1, col2 = st.columns(2)
        with col1:
            salaire_brut = st.number_input(f"Salaire {poste} ($/mois)", 
                                         value=salaires[poste].get("salaire_brut", 0.0), 
                                         min_value=0.0,
                                         key=f"salaire_{poste}")
            salaires[poste]["salaire_brut"] = salaire_brut
            total_mensuel += salaire_brut
        
        with col2:
            # Calcul automatique des charges sociales (approximation 45%)
            charges_sociales = salaire_brut * 0.45
            st.metric(f"Charges sociales {poste}", f"{charges_sociales:,.0f} $")
            salaires[poste]["charges_sociales"] = charges_sociales
    
    # Totaux
    total_charges_sociales = sum([poste.get("charges_sociales", 0) for poste in salaires.values()])
    cout_total_mensuel = total_mensuel + total_charges_sociales
    cout_total_annuel = cout_total_mensuel * 12
    
    st.subheader("R√©capitulatif")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Salaires bruts/mois", f"{total_mensuel:,.0f} $")
    with col2:
        st.metric("Charges sociales/mois", f"{total_charges_sociales:,.0f} $")
    with col3:
        st.metric("Co√ªt total annuel", f"{cout_total_annuel:,.0f} $")
    
    # Sauvegarder pour les autres calculs
    st.session_state.data["total_salaires_annee1"] = cout_total_annuel

def page_rentabilite():
    """Page de rentabilit√© - Calculs automatiques"""
    st.title("üìä Analyse de Rentabilit√©")
    st.markdown("### Calculs automatiques bas√©s sur vos donn√©es financi√®res")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # R√©cup√©ration des donn√©es
    ca_1 = data.get("total_ca_annee1", 0.0)
    charges_fixes = data.get("total_charges_fixes_annee1", 0.0)
    taux_cv = data.get("taux_charges_variables", 0.0)
    salaires = data.get("total_salaires_annee1", 0.0)
    
    st.subheader("Donn√©es de base")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("CA Ann√©e 1", f"{ca_1:,.0f} $")
    with col2:
        st.metric("Charges fixes", f"{charges_fixes:,.0f} $")
    with col3:
        st.metric("Taux CV", f"{taux_cv:.1f}%")
    with col4:
        st.metric("Salaires", f"{salaires:,.0f} $")
    
    if ca_1 > 0 and (charges_fixes > 0 or taux_cv > 0):
        # Calculs de rentabilit√©
        charges_variables_euros = ca_1 * (taux_cv / 100)
        marge_contributive = ca_1 - charges_variables_euros
        charges_fixes_totales = charges_fixes + salaires
        resultat_net = marge_contributive - charges_fixes_totales
        
        st.subheader("R√©sultats")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Marge contributive", f"{marge_contributive:,.0f} $")
        with col2:
            st.metric("Charges fixes totales", f"{charges_fixes_totales:,.0f} $")
        with col3:
            if resultat_net >= 0:
                st.metric("R√©sultat net", f"{resultat_net:,.0f} $", delta="B√©n√©fice")
            else:
                st.metric("R√©sultat net", f"{resultat_net:,.0f} $", delta="Perte")
        
        # Seuil de rentabilit√©
        if taux_cv < 100:
            seuil = charges_fixes_totales / (1 - taux_cv/100)
            st.subheader("Seuil de rentabilit√©")
            st.metric("Seuil de rentabilit√©", f"{seuil:,.0f} $")
            
            if ca_1 >= seuil:
                st.success("‚úÖ Projet rentable d√®s la premi√®re ann√©e")
            else:
                st.warning(f"‚ö†Ô∏è Il manque {seuil - ca_1:,.0f} $ de CA pour √™tre rentable")
    else:
        st.warning("Veuillez renseigner le chiffre d'affaires et les charges pour voir l'analyse de rentabilit√©")

def page_generation_business_plan():
    """Page de g√©n√©ration du business plan - Version am√©lior√©e"""
    st.title("üìÑ G√©n√©ration Business Plan")
    
    if "data" not in st.session_state:
        st.session_state.data = {}
    
    data = st.session_state.data
    
    # V√©rification des donn√©es disponibles
    has_info_gen = "informations_generales" in data and data["informations_generales"]
    has_financial = any([
        data.get("total_ca_annee1", 0) > 0,
        data.get("total_charges_fixes_annee1", 0) > 0,
        data.get("besoins_demarrage", {})
    ])
    has_business_model = st.session_state.get('business_model_precedent', '')
    
    # Interface am√©lior√©e
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("### üìä Statut des donn√©es")
        if has_info_gen:
            st.success("‚úÖ Informations g√©n√©rales")
        else:
            st.warning("‚ö†Ô∏è Informations g√©n√©rales manquantes")
            
        if has_business_model:
            st.success("‚úÖ Business Model")
        else:
            st.warning("‚ö†Ô∏è Business Model manquant")
            
        if has_financial:
            st.success("‚úÖ Donn√©es financi√®res")
        else:
            st.warning("‚ö†Ô∏è Donn√©es financi√®res manquantes")
        
        st.markdown("---")
        
        if has_info_gen and has_financial:
            st.success("üü¢ Pr√™t √† g√©n√©rer")
        else:
            st.error("üî¥ Donn√©es insuffisantes")
    
    with col1:
        if not (has_info_gen and has_financial):
            st.error("‚ùå **Donn√©es insuffisantes pour g√©n√©rer le business plan**")
            st.info("üí° Compl√©tez d'abord les sections suivantes :")
            
            if not has_info_gen:
                st.markdown("- **Finances** ‚Üí **Informations G√©n√©rales**")
            if not has_financial:
                st.markdown("- **Finances** ‚Üí **Donn√©es financi√®res** (CA, charges, etc.)")
            if not has_business_model:
                st.markdown("- **Business Model** ‚Üí **Business Model Final**")
                
        else:
            st.success("‚úÖ **Pr√™t √† g√©n√©rer votre business plan**")
            
            # Options de g√©n√©ration
            format_sortie = st.selectbox(
                "Format de sortie",
                ["PDF", "Word", "Text"],
                index=0
            )
            
            include_charts = st.checkbox("Inclure les graphiques financiers", value=True)
            
            if st.button("üìÑ **G√©n√©rer Business Plan**", type="primary", use_container_width=True):
                with st.spinner("‚è≥ G√©n√©ration en cours..."):
                    
                    # G√©n√©ration du contenu
                    business_plan_content = generer_business_plan_complet(data, has_business_model)
                    
                    st.success("üéâ **Business Plan g√©n√©r√© avec succ√®s !**")
                    
                    # Affichage du r√©sultat
                    st.markdown("### üìã Votre Business Plan")
                    
                    # Zone de texte √©ditable
                    business_plan_edite = st.text_area(
                        "Contenu du Business Plan",
                        value=business_plan_content,
                        height=500,
                        help="Vous pouvez modifier directement le contenu ici"
                    )
                    
                    # Boutons d'action
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        nom_entreprise = data.get("informations_generales", {}).get("nom_entreprise", "entreprise")
                        st.download_button(
                            "üì• T√©l√©charger",
                            business_plan_edite,
                            file_name=f"business_plan_{nom_entreprise}.txt",
                            mime="text/plain"
                        )
                    
                    with col_btn2:
                        if st.button("üíæ Sauvegarder"):
                            st.session_state['business_plan_generated'] = business_plan_edite
                            st.success("‚úÖ Sauvegard√©!")

def generer_business_plan_complet(data, has_business_model):
    """G√©n√®re le contenu complet du business plan"""
    
    content = []
    
    # En-t√™te
    nom_entreprise = data.get("informations_generales", {}).get("nom_entreprise", "Mon Entreprise")
    content.append(f"# BUSINESS PLAN - {nom_entreprise.upper()}")
    content.append("=" * 50)
    content.append("")
    
    # 1. Informations g√©n√©rales
    content.append("## 1. PR√âSENTATION DE L'ENTREPRISE")
    content.append("")
    if "informations_generales" in data:
        for key, value in data["informations_generales"].items():
            if value:
                content.append(f"**{key.replace('_', ' ').title()}:** {value}")
    content.append("")
    
    # 2. Business Model (si disponible)
    if has_business_model:
        content.append("## 2. BUSINESS MODEL")
        content.append("")
        content.append(st.session_state.get('business_model_precedent', 'Business Model non disponible'))
        content.append("")
    
    # 3. Analyse financi√®re
    content.append("## 3. ANALYSE FINANCI√àRE")
    content.append("")
    
    # Donn√©es financi√®res
    ca_1 = data.get("total_ca_annee1", 0.0)
    charges_fixes = data.get("total_charges_fixes_annee1", 0.0)
    salaires = data.get("total_salaires_annee1", 0.0)
    charges_variables = data.get("total_charges_variables_annee1", 0.0)
    
    if ca_1 > 0:
        content.append("### Pr√©visions Ann√©e 1")
        content.append(f"- **Chiffre d'affaires:** {ca_1:,.0f} $")
        content.append(f"- **Charges fixes:** {charges_fixes:,.0f} $")
        content.append(f"- **Salaires:** {salaires:,.0f} $")
        content.append(f"- **Charges variables:** {charges_variables:,.0f} $")
        
        total_charges = charges_fixes + salaires + charges_variables
        resultat = ca_1 - total_charges
        
        content.append("")
        content.append(f"**R√âSULTAT PR√âVISIONNEL:** {resultat:,.0f} $")
        
        if resultat > 0:
            content.append("‚úÖ **Projet rentable**")
        else:
            content.append("‚ö†Ô∏è **Attention: Projet d√©ficitaire**")
    
    content.append("")
    
    # 4. Besoins de d√©marrage
    if "besoins_demarrage" in data and data["besoins_demarrage"]:
        content.append("## 4. BESOINS DE D√âMARRAGE")
        content.append("")
        for categorie, montant in data["besoins_demarrage"].items():
            if montant > 0:
                content.append(f"- **{categorie.replace('_', ' ').title()}:** {montant:,.0f} $")
        content.append("")
    
    # 5. Conclusion
    content.append("## 5. CONCLUSION")
    content.append("")
    content.append("Ce business plan pr√©sente les √©l√©ments cl√©s du projet d'entreprise.")
    content.append("Les donn√©es financi√®res pr√©visionnelles permettent d'√©valuer la viabilit√© du projet.")
    content.append("")
    content.append("---")
    content.append(f"*Document g√©n√©r√© le {date.today().strftime('%d/%m/%Y')}*")
    
    return "\n".join(content)


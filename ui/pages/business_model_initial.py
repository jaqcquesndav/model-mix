"""
Page Business Model Initial - Version simplifi√©e et professionnelle
Remplace la collecte persona/march√©/concurrence par les 9 blocs du Business Model Canvas
"""

import streamlit as st
import json
from datetime import datetime
from services.business import sauvegarder_donnees_session
from ui.components import afficher_template_info, bouton_sauvegarder_avec_confirmation

def page_business_model_initial():
    """Page pour cr√©er ou importer un Business Model Canvas initial"""
    
    st.title("üéØ Business Model Initial")
    st.markdown("### D√©finissez votre mod√®le d'affaires selon les 9 blocs du Business Model Canvas")
    
    # Options d'import/cr√©ation
    col1, col2 = st.columns([3, 1])
    
    with col1:
        option = st.radio(
            "Comment voulez-vous proc√©der ?",
            ["‚úçÔ∏è Remplir manuellement", "üìÑ Importer depuis un fichier"],
            horizontal=True
        )
    
    with col2:
        # Type d'entreprise pour l'am√©lioration IA
        type_entreprise = st.selectbox(
            "Type d'entreprise",
            ["PME", "Startup"],
            help="D√©termine la logique d'am√©lioration IA qui suivra"
        )
        st.session_state['type_entreprise'] = type_entreprise
    
    if option == "üìÑ Importer depuis un fichier":
        page_import_business_model()
    else:
        page_creation_business_model_manuel()

def page_import_business_model():
    """Import d'un business model depuis un fichier"""
    
    st.subheader("üìÑ Import Business Model")
    
    uploaded_file = st.file_uploader(
        "Choisissez un fichier",
        type=['json', 'txt'],
        help="Formats support√©s: JSON (Business Model Canvas), TXT (description libre)"
    )
    
    if uploaded_file is not None:
        try:
            if uploaded_file.type == "application/json":
                content = json.loads(uploaded_file.getvalue().decode("utf-8"))
                st.success("‚úÖ Fichier JSON import√© avec succ√®s!")
                
                # Validation et mapping des donn√©es
                if validate_business_model_json(content):
                    st.session_state['business_model_initial'] = content
                    st.rerun()
                else:
                    st.error("‚ùå Structure JSON invalide. Utilisez le format Business Model Canvas standard.")
                    
            else:  # TXT
                content = uploaded_file.getvalue().decode("utf-8")
                st.success("‚úÖ Fichier texte import√©!")
                
                # Conversion texte libre en structure
                business_model_from_text = parse_text_to_business_model(content)
                st.session_state['business_model_initial'] = business_model_from_text
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'import: {str(e)}")
    
    # Template d'exemple pour t√©l√©chargement
    st.markdown("---")
    st.subheader("üìã Template d'exemple")
    
    template_json = get_business_model_template()
    
    st.download_button(
        label="üì• T√©l√©charger template JSON",
        data=json.dumps(template_json, indent=2, ensure_ascii=False),
        file_name="business_model_template.json",
        mime="application/json"
    )
    
    with st.expander("üëÅÔ∏è Voir le template"):
        st.json(template_json)

def page_creation_business_model_manuel():
    """Cr√©ation manuelle du business model selon les 9 blocs"""
    
    st.subheader("‚úçÔ∏è Business Model Canvas - 9 Blocs")
    
    # R√©cup√©ration des donn√©es existantes
    business_model = st.session_state.get('business_model_initial', get_empty_business_model())
    
    # Organisation en colonnes pour une meilleure pr√©sentation
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.markdown("#### ü§ù Partenaires Cl√©s")
        business_model['partenaires_cles'] = st.text_area(
            "Qui sont vos partenaires strat√©giques ?",
            value=business_model.get('partenaires_cles', ''),
            height=120,
            help="Fournisseurs cl√©s, partenaires strat√©giques, alliances...",
            placeholder="Ex: Fournisseurs mati√®res premi√®res, distributeurs, partenaires technologiques..."
        )
        
        st.markdown("#### üîß Activit√©s Cl√©s")
        business_model['activites_cles'] = st.text_area(
            "Quelles sont vos activit√©s principales ?",
            value=business_model.get('activites_cles', ''),
            height=120,
            help="Production, r√©solution de probl√®mes, plateforme/r√©seau...",
            placeholder="Ex: Production, marketing, R&D, logistique..."
        )
        
        st.markdown("#### üõ†Ô∏è Ressources Cl√©s")
        business_model['ressources_cles'] = st.text_area(
            "Quelles ressources sont essentielles ?",
            value=business_model.get('ressources_cles', ''),
            height=120,
            help="Physiques, intellectuelles, humaines, financi√®res...",
            placeholder="Ex: √âquipements, brevets, √©quipe qualifi√©e, capital..."
        )
    
    with col2:
        st.markdown("#### üí° Propositions de Valeur")
        business_model['propositions_valeur'] = st.text_area(
            "Quelle valeur cr√©ez-vous pour vos clients ?",
            value=business_model.get('propositions_valeur', ''),
            height=180,
            help="Produits/services qui cr√©ent de la valeur pour un segment client",
            placeholder="Ex: R√©sout le probl√®me X, am√©liore la performance Y, r√©duit les co√ªts..."
        )
        
        st.markdown("#### ü§ù Relations Clients")
        business_model['relations_clients'] = st.text_area(
            "Comment maintenez-vous vos relations clients ?",
            value=business_model.get('relations_clients', ''),
            height=120,
            help="Assistance personnelle, self-service, communaut√©s...",
            placeholder="Ex: Service client personnalis√©, assistance en ligne, communaut√©..."
        )
        
        st.markdown("#### üì¢ Canaux de Distribution")
        business_model['canaux_distribution'] = st.text_area(
            "Comment atteignez-vous vos clients ?",
            value=business_model.get('canaux_distribution', ''),
            height=120,
            help="Vente directe, partenaires, web, magasins...",
            placeholder="Ex: Boutique physique, site web, revendeurs, r√©seaux sociaux..."
        )
    
    with col3:
        st.markdown("#### üë• Segments Clients")
        business_model['segments_clients'] = st.text_area(
            "Qui sont vos clients cibles ?",
            value=business_model.get('segments_clients', ''),
            height=120,
            help="Groupes de personnes/organisations que vous visez",
            placeholder="Ex: PME locales, particuliers 25-45 ans, entreprises industrielles..."
        )
        
        st.markdown("#### üí∞ Structure de Co√ªts")
        business_model['structure_couts'] = st.text_area(
            "Quels sont vos principaux co√ªts ?",
            value=business_model.get('structure_couts', ''),
            height=120,
            help="Co√ªts fixes, variables, √©conomies d'√©chelle...",
            placeholder="Ex: Mati√®res premi√®res, salaires, loyer, marketing..."
        )
        
        st.markdown("#### üíµ Sources de Revenus")
        business_model['sources_revenus'] = st.text_area(
            "Comment g√©n√©rez-vous des revenus ?",
            value=business_model.get('sources_revenus', ''),
            height=120,
            help="Vente, abonnement, commission, licence...",
            placeholder="Ex: Vente de produits, services mensuels, commissions..."
        )
    
    # M√©tadonn√©es
    st.markdown("---")
    st.markdown("#### üìã Informations Compl√©mentaires")
    
    col_meta1, col_meta2 = st.columns(2)
    
    with col_meta1:
        business_model['nom_modele'] = st.text_input(
            "Nom du mod√®le d'affaires",
            value=business_model.get('nom_modele', ''),
            placeholder="Ex: Mod√®le E-commerce B2C"
        )
        
        business_model['secteur_activite'] = st.text_input(
            "Secteur d'activit√©",
            value=business_model.get('secteur_activite', st.session_state.get('secteur_activite', '')),
            placeholder="Ex: Commerce de d√©tail, Services num√©riques..."
        )
    
    with col_meta2:
        business_model['version'] = st.text_input(
            "Version",
            value=business_model.get('version', '1.0'),
            placeholder="1.0"
        )
        
        business_model['date_creation'] = st.date_input(
            "Date de cr√©ation",
            value=datetime.now().date()
        ).isoformat()
    
    # Boutons d'action
    st.markdown("---")
    col_save, col_preview, col_export = st.columns([1, 1, 1])
    
    with col_save:
        if st.button("üíæ Sauvegarder Business Model", type="primary"):
            # Validation des champs obligatoires
            if validate_business_model(business_model):
                st.session_state['business_model_initial'] = business_model
                sauvegarder_donnees_session('business_model_initial', business_model)
                st.success("‚úÖ Business Model sauvegard√©!")
                st.balloons()
            else:
                st.error("‚ùå Veuillez remplir tous les blocs obligatoires")
    
    with col_preview:
        if st.button("üëÅÔ∏è Aper√ßu"):
            show_business_model_preview(business_model)
    
    with col_export:
        if st.button("üì• Exporter JSON"):
            export_business_model_json(business_model)

def page_arbre_probleme():
    """Page sp√©cialis√©e pour l'arbre √† probl√®me (conserv√©e de l'ancienne logique)"""
    
    st.title("üå≥ Arbre √† Probl√®me")
    st.markdown("### Analysez la probl√©matique que votre entreprise r√©sout")
    
    # R√©cup√©ration des donn√©es existantes
    arbre_data = st.session_state.get('arbre_probleme', {})
    
    st.markdown("#### üéØ Probl√®me Central")
    probleme_central = st.text_area(
        "Quel est le probl√®me principal que vous r√©solvez ?",
        value=arbre_data.get('probleme_central', ''),
        height=100,
        help="Le probl√®me core que votre entreprise adresse",
        placeholder="Ex: Les PME locales n'ont pas acc√®s √† des solutions de gestion abordables..."
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üîó Causes (Pourquoi ce probl√®me existe-t-il ?)")
        causes = st.text_area(
            "Causes du probl√®me",
            value=arbre_data.get('causes', ''),
            height=150,
            help="Les raisons pour lesquelles ce probl√®me existe",
            placeholder="‚Ä¢ Manque de budget\n‚Ä¢ Solutions trop complexes\n‚Ä¢ Manque de formation..."
        )
    
    with col2:
        st.markdown("#### üí• Cons√©quences (Quel impact si non r√©solu ?)")
        consequences = st.text_area(
            "Cons√©quences du probl√®me",
            value=arbre_data.get('consequences', ''),
            height=150,
            help="Ce qui arrive si le probl√®me n'est pas r√©solu",
            placeholder="‚Ä¢ Perte de comp√©titivit√©\n‚Ä¢ Inefficacit√© op√©rationnelle\n‚Ä¢ Croissance limit√©e..."
        )
    
    st.markdown("#### üí° Votre Solution")
    solution = st.text_area(
        "Comment votre entreprise r√©sout-elle ce probl√®me ?",
        value=arbre_data.get('solution', ''),
        height=100,
        help="Votre approche pour r√©soudre le probl√®me identifi√©",
        placeholder="Ex: Nous proposons une solution SaaS simple et abordable..."
    )
    
    if st.button("üíæ Sauvegarder Arbre √† Probl√®me", type="primary"):
        arbre_probleme = {
            'probleme_central': probleme_central,
            'causes': causes,
            'consequences': consequences,
            'solution': solution,
            'date_creation': datetime.now().isoformat()
        }
        
        st.session_state['arbre_probleme'] = arbre_probleme
        sauvegarder_donnees_session('arbre_probleme', arbre_probleme)
        st.success("‚úÖ Arbre √† probl√®me sauvegard√©!")

# Fonctions utilitaires

def get_empty_business_model():
    """Retourne un business model vide"""
    return {
        'partenaires_cles': '',
        'activites_cles': '',
        'ressources_cles': '',
        'propositions_valeur': '',
        'relations_clients': '',
        'canaux_distribution': '',
        'segments_clients': '',
        'structure_couts': '',
        'sources_revenus': '',
        'nom_modele': '',
        'secteur_activite': '',
        'version': '1.0',
        'date_creation': datetime.now().isoformat()
    }

def get_business_model_template():
    """Retourne un template d'exemple pour le business model"""
    return {
        "nom_modele": "E-commerce Local",
        "secteur_activite": "Commerce √©lectronique",
        "version": "1.0",
        "date_creation": datetime.now().isoformat(),
        "partenaires_cles": "‚Ä¢ Fournisseurs locaux\n‚Ä¢ Partenaires logistiques\n‚Ä¢ Banques/syst√®mes de paiement",
        "activites_cles": "‚Ä¢ Gestion de plateforme e-commerce\n‚Ä¢ Marketing digital\n‚Ä¢ Service client",
        "ressources_cles": "‚Ä¢ Plateforme technologique\n‚Ä¢ Base de donn√©es clients\n‚Ä¢ √âquipe technique",
        "propositions_valeur": "‚Ä¢ Acc√®s facile aux produits locaux\n‚Ä¢ Livraison rapide\n‚Ä¢ Prix comp√©titifs",
        "relations_clients": "‚Ä¢ Service client responsive\n‚Ä¢ Programme de fid√©lit√©\n‚Ä¢ Support en ligne",
        "canaux_distribution": "‚Ä¢ Site web\n‚Ä¢ Application mobile\n‚Ä¢ R√©seaux sociaux",
        "segments_clients": "‚Ä¢ Particuliers urbains 25-45 ans\n‚Ä¢ Familles avec enfants\n‚Ä¢ Professionnels actifs",
        "structure_couts": "‚Ä¢ D√©veloppement technologique\n‚Ä¢ Marketing digital\n‚Ä¢ Co√ªts logistiques",
        "sources_revenus": "‚Ä¢ Commissions sur ventes\n‚Ä¢ Frais de livraison\n‚Ä¢ Services premium"
    }

def validate_business_model(business_model):
    """Valide qu'un business model a les champs essentiels remplis"""
    champs_obligatoires = [
        'propositions_valeur', 'segments_clients', 'sources_revenus'
    ]
    
    for champ in champs_obligatoires:
        if not business_model.get(champ, '').strip():
            return False
    
    return True

def validate_business_model_json(content):
    """Valide qu'un JSON import√© a la structure d'un business model"""
    champs_requis = [
        'partenaires_cles', 'activites_cles', 'ressources_cles',
        'propositions_valeur', 'relations_clients', 'canaux_distribution',
        'segments_clients', 'structure_couts', 'sources_revenus'
    ]
    
    return all(champ in content for champ in champs_requis)

def parse_text_to_business_model(text_content):
    """Parse un texte libre en structure business model"""
    # Impl√©mentation basique - peut √™tre am√©lior√©e avec IA
    return {
        **get_empty_business_model(),
        'propositions_valeur': text_content[:500] + "..." if len(text_content) > 500 else text_content,
        'date_creation': datetime.now().isoformat()
    }

def show_business_model_preview(business_model):
    """Affiche un aper√ßu du business model"""
    st.markdown("### üëÅÔ∏è Aper√ßu Business Model Canvas")
    
    # Organisation en 3 colonnes comme un vrai canvas
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.markdown("**ü§ù Partenaires Cl√©s**")
        st.write(business_model.get('partenaires_cles', 'Non d√©fini'))
        
        st.markdown("**üîß Activit√©s Cl√©s**")
        st.write(business_model.get('activites_cles', 'Non d√©fini'))
        
        st.markdown("**üõ†Ô∏è Ressources Cl√©s**")
        st.write(business_model.get('ressources_cles', 'Non d√©fini'))
    
    with col2:
        st.markdown("**üí° Propositions de Valeur**")
        st.write(business_model.get('propositions_valeur', 'Non d√©fini'))
        
        st.markdown("**ü§ù Relations Clients**")
        st.write(business_model.get('relations_clients', 'Non d√©fini'))
        
        st.markdown("**üì¢ Canaux**")
        st.write(business_model.get('canaux_distribution', 'Non d√©fini'))
    
    with col3:
        st.markdown("**üë• Segments Clients**")
        st.write(business_model.get('segments_clients', 'Non d√©fini'))
        
        st.markdown("**üí∞ Structure de Co√ªts**")
        st.write(business_model.get('structure_couts', 'Non d√©fini'))
        
        st.markdown("**üíµ Sources de Revenus**")
        st.write(business_model.get('sources_revenus', 'Non d√©fini'))

def export_business_model_json(business_model):
    """Exporte le business model en JSON"""
    json_data = json.dumps(business_model, indent=2, ensure_ascii=False)
    
    st.download_button(
        label="üì• T√©l√©charger Business Model (JSON)",
        data=json_data,
        file_name=f"business_model_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
        mime="application/json"
    )
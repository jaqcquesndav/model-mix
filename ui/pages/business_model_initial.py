"""
Page Business Model Initial - Version simplifi√©e et professionnelle
Remplace la collecte persona/march√©/concurrence par les 9 blocs du Business Model Canvas
"""

import streamlit as st
import json
from datetime import datetime
from services.business import sauvegarder_donnees_session
from ui.components import afficher_template_info, bouton_sauvegarder_avec_confirmation

def page_business_model_initial():
    """Page pour cr√©er ou importer un Business Model Canvas initial"""
    
    st.title("üéØ Business Model Initial")
    st.markdown("### D√©finissez votre mod√®le d'affaires selon les 9 blocs du Business Model Canvas")
    
    # Options d'import/cr√©ation
    col1, col2 = st.columns([3, 1])
    
    with col1:
        option = st.radio(
            "Comment voulez-vous proc√©der ?",
            ["‚úçÔ∏è Remplir manuellement", "üìÑ Importer depuis un fichier"],
            horizontal=True
        )
    
    with col2:
        # Type d'entreprise pour l'am√©lioration IA
        type_entreprise = st.selectbox(
            "Type d'entreprise",
            ["PME", "Startup"],
            help="D√©termine la logique d'am√©lioration IA qui suivra"
        )
        st.session_state['type_entreprise'] = type_entreprise
    
    if option == "üìÑ Importer depuis un fichier":
        page_import_business_model()
    else:
        page_creation_business_model_manuel()

def page_import_business_model():
    """Import d'un business model depuis un fichier"""
    
    st.subheader("üìÑ Import Business Model")
    
    uploaded_file = st.file_uploader(
        "Choisissez un fichier",
        type=['json', 'txt'],
        help="Formats support√©s: JSON (Business Model Canvas), TXT (description libre)"
    )
    
    if uploaded_file is not None:
        try:
            if uploaded_file.type == "application/json":
                content = json.loads(uploaded_file.getvalue().decode("utf-8"))
                st.success("‚úÖ Fichier JSON import√© avec succ√®s!")
                
                # Validation et mapping des donn√©es
                if validate_business_model_json(content):
                    st.session_state['business_model_initial'] = content
                    st.rerun()
                else:
                    st.error("‚ùå Structure JSON invalide. Utilisez le format Business Model Canvas standard.")
                    
            else:  # TXT
                content = uploaded_file.getvalue().decode("utf-8")
                st.success("‚úÖ Fichier texte import√©!")
                
                # Conversion texte libre en structure
                business_model_from_text = parse_text_to_business_model(content)
                st.session_state['business_model_initial'] = business_model_from_text
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'import: {str(e)}")
    
    # Template d'exemple pour t√©l√©chargement
    st.markdown("---")
    st.subheader("üìã Template d'exemple")
    
    template_json = get_business_model_template()
    
    st.download_button(
        label="üì• T√©l√©charger template JSON",
        data=json.dumps(template_json, indent=2, ensure_ascii=False),
        file_name="business_model_template.json",
        mime="application/json"
    )
    
    with st.expander("üëÅÔ∏è Voir le template"):
        st.json(template_json)

def page_creation_business_model_manuel():
    """Cr√©ation manuelle du business model selon les 9 blocs avec suggestions IA automatiques"""
    
    st.subheader("‚úçÔ∏è Business Model Canvas - 9 Blocs")
    st.markdown("Remplissez les 9 blocs de votre mod√®le d'affaires. L'IA vous sugg√®re du contenu automatiquement bas√© sur vos informations.")
    
    # Initialisation et pr√©-remplissage automatique intelligent
    if 'business_model_initial' not in st.session_state:
        st.session_state['business_model_initial'] = get_empty_business_model()
        
    # Pr√©-remplissage automatique au premier chargement avec donn√©es disponibles
    auto_prefill_on_load()
    
    # Bouton de pr√©-remplissage IA am√©lior√©
    col_ai, col_clear, col_info = st.columns([2, 1, 1])
    
    with col_ai:
        if st.button("üîÑ Actualiser les suggestions IA", help="Met √† jour les suggestions bas√©es sur vos derni√®res donn√©es"):
            with st.spinner("üß† L'IA actualise les suggestions..."):
                if prefill_with_ai(force_update=True):
                    st.success("‚ú® Suggestions mises √† jour ! Modifiez-les selon vos besoins.")
                    st.rerun()
                else:
                    st.warning("‚ÑπÔ∏è Ajoutez plus d'informations (informations g√©n√©rales, arbre √† probl√®me, analyse de march√©) pour de meilleures suggestions.")
        
        # Bouton de test pour forcer le pr√©-remplissage
        if st.button("üß™ Test Pr√©-remplissage", help="Force le pr√©-remplissage m√™me avec des donn√©es minimales"):
            st.session_state['auto_prefill_done'] = False  # Reset le flag
            with st.spinner("üîß Test du pr√©-remplissage..."):
                if prefill_with_ai():
                    st.success("‚úÖ Test r√©ussi ! Business model pr√©-rempli.")
                    st.rerun()
                else:
                    st.error("‚ùå √âchec du test. V√©rifiez les donn√©es d'entr√©e.")
        
        # Bouton de donn√©es de test
        if st.button("üìã Donn√©es de test", help="Ajoute des donn√©es minimales pour tester l'IA"):
            # Ajouter des donn√©es minimales pour tester
            st.session_state['nom_entreprise'] = "MonEntreprise Test"
            st.session_state['secteur_activite'] = "Commerce"
            st.session_state['arbre_probleme'] = {
                'probleme_central': 'Les clients ont du mal √† trouver des produits de qualit√©',
                'solution': 'Boutique en ligne avec s√©lection curat√©e',
                'causes': 'Manque d\'information, prix √©lev√©s',
                'consequences': 'Perte de temps, frustration'
            }
            st.success("‚úÖ Donn√©es de test ajout√©es ! Essayez maintenant l'actualisation IA.")
            st.rerun()
    
    with col_clear:
        if st.button("üßπ Effacer tout", help="Remet √† z√©ro tous les champs"):
            st.session_state['business_model_initial'] = get_empty_business_model()
            st.session_state['auto_prefill_done'] = False  # Permettre un nouveau auto-remplissage
            st.success("üóëÔ∏è Champs effac√©s !")
            st.rerun()
    
    with col_info:
        donnees_disponibles = get_available_data_summary()
        if donnees_disponibles:
            with st.expander("üìä Donn√©es IA", expanded=False):
                st.write(donnees_disponibles)
                st.caption("üí° Plus vous remplissez d'informations, meilleures sont les suggestions IA.")
    
    # R√©cup√©ration des donn√©es existantes
    business_model = st.session_state.get('business_model_initial', get_empty_business_model())
    
    # Indicateur de suggestions IA actives
    has_ai_data = has_sufficient_data()
    ai_indicator = "ü§ñ " if has_ai_data else ""
    ai_help_suffix = " (Suggestions IA disponibles)" if has_ai_data else " (Compl√©tez d'abord vos informations pour l'aide IA)"
    
    # Organisation en colonnes pour une meilleure pr√©sentation
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.markdown(f"#### {ai_indicator}ü§ù Partenaires Cl√©s")
        business_model['partenaires_cles'] = st.text_area(
            "Qui sont vos partenaires strat√©giques ?",
            value=business_model.get('partenaires_cles', ''),
            height=120,
            help=f"Fournisseurs cl√©s, partenaires strat√©giques, alliances...{ai_help_suffix}",
            placeholder="Ex: Fournisseurs mati√®res premi√®res, distributeurs, partenaires technologiques..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}üîß Activit√©s Cl√©s")
        business_model['activites_cles'] = st.text_area(
            "Quelles sont vos activit√©s principales ?",
            value=business_model.get('activites_cles', ''),
            height=120,
            help=f"Production, r√©solution de probl√®mes, plateforme/r√©seau...{ai_help_suffix}",
            placeholder="Ex: Production, marketing, R&D, logistique..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}üõ†Ô∏è Ressources Cl√©s")
        business_model['ressources_cles'] = st.text_area(
            "Quelles ressources sont essentielles ?",
            value=business_model.get('ressources_cles', ''),
            height=120,
            help=f"Physiques, intellectuelles, humaines, financi√®res...{ai_help_suffix}",
            placeholder="Ex: √âquipements, brevets, √©quipe qualifi√©e, capital..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
    
    with col2:
        st.markdown(f"#### {ai_indicator}üí° Propositions de Valeur")
        business_model['propositions_valeur'] = st.text_area(
            "Quelle valeur cr√©ez-vous pour vos clients ?",
            value=business_model.get('propositions_valeur', ''),
            height=180,
            help=f"Produits/services qui cr√©ent de la valeur pour un segment client{ai_help_suffix}",
            placeholder="Ex: R√©sout le probl√®me X, am√©liore la performance Y, r√©duit les co√ªts..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}ü§ù Relations Clients")
        business_model['relations_clients'] = st.text_area(
            "Comment maintenez-vous vos relations clients ?",
            value=business_model.get('relations_clients', ''),
            height=120,
            help=f"Assistance personnelle, self-service, communaut√©s...{ai_help_suffix}",
            placeholder="Ex: Service client personnalis√©, assistance en ligne, communaut√©..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}üì¢ Canaux de Distribution")
        business_model['canaux_distribution'] = st.text_area(
            "Comment atteignez-vous vos clients ?",
            value=business_model.get('canaux_distribution', ''),
            height=120,
            help=f"Vente directe, partenaires, web, magasins...{ai_help_suffix}",
            placeholder="Ex: Boutique physique, site web, revendeurs, r√©seaux sociaux..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
    
    with col3:
        st.markdown(f"#### {ai_indicator}üë• Segments Clients")
        business_model['segments_clients'] = st.text_area(
            "Qui sont vos clients cibles ?",
            value=business_model.get('segments_clients', ''),
            height=120,
            help=f"Groupes de personnes/organisations que vous visez{ai_help_suffix}",
            placeholder="Ex: PME locales, particuliers 25-45 ans, entreprises industrielles..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}üí∞ Structure de Co√ªts")
        business_model['structure_couts'] = st.text_area(
            "Quels sont vos principaux co√ªts ?",
            value=business_model.get('structure_couts', ''),
            height=120,
            help=f"Co√ªts fixes, variables, √©conomies d'√©chelle...{ai_help_suffix}",
            placeholder="Ex: Mati√®res premi√®res, salaires, loyer, marketing..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
        
        st.markdown(f"#### {ai_indicator}üíµ Sources de Revenus")
        business_model['sources_revenus'] = st.text_area(
            "Comment g√©n√©rez-vous des revenus ?",
            value=business_model.get('sources_revenus', ''),
            height=120,
            help=f"Vente, abonnement, commission, licence...{ai_help_suffix}",
            placeholder="Ex: Vente de produits, services mensuels, commissions..." + (" [IA peut sugg√©rer]" if has_ai_data else "")
        )
    
    # M√©tadonn√©es
    st.markdown("---")
    st.markdown("#### üìã Informations Compl√©mentaires")
    
    col_meta1, col_meta2 = st.columns(2)
    
    with col_meta1:
        business_model['nom_modele'] = st.text_input(
            "Nom du mod√®le d'affaires",
            value=business_model.get('nom_modele', ''),
            placeholder="Ex: Mod√®le E-commerce B2C"
        )
        
        business_model['secteur_activite'] = st.text_input(
            "Secteur d'activit√©",
            value=business_model.get('secteur_activite', st.session_state.get('secteur_activite', '')),
            placeholder="Ex: Commerce de d√©tail, Services num√©riques..."
        )
    
    with col_meta2:
        business_model['version'] = st.text_input(
            "Version",
            value=business_model.get('version', '1.0'),
            placeholder="1.0"
        )
        
        business_model['date_creation'] = st.date_input(
            "Date de cr√©ation",
            value=datetime.now().date()
        ).isoformat()
    
    # Boutons d'action
    st.markdown("---")
    col_save, col_preview, col_export = st.columns([1, 1, 1])
    
    with col_save:
        if st.button("üíæ Sauvegarder Business Model", type="primary"):
            # Validation des champs obligatoires
            if validate_business_model(business_model):
                st.session_state['business_model_initial'] = business_model
                sauvegarder_donnees_session('business_model_initial', business_model)
                st.success("‚úÖ Business Model sauvegard√©!")
                st.balloons()
            else:
                st.error("‚ùå Veuillez remplir tous les blocs obligatoires")
    
    with col_preview:
        if st.button("üëÅÔ∏è Aper√ßu"):
            show_business_model_preview(business_model)
    
    with col_export:
        if st.button("üì• Exporter JSON"):
            export_business_model_json(business_model)

def page_arbre_probleme():
    """Page sp√©cialis√©e pour l'arbre √† probl√®me (conserv√©e de l'ancienne logique)"""
    
    st.title("üå≥ Arbre √† Probl√®me")
    st.markdown("### Analysez la probl√©matique que votre entreprise r√©sout")
    
    # R√©cup√©ration des donn√©es existantes
    arbre_data = st.session_state.get('arbre_probleme', {})
    
    st.markdown("#### üéØ Probl√®me Central")
    probleme_central = st.text_area(
        "Quel est le probl√®me principal que vous r√©solvez ?",
        value=arbre_data.get('probleme_central', ''),
        height=100,
        help="Le probl√®me core que votre entreprise adresse",
        placeholder="Ex: Les PME locales n'ont pas acc√®s √† des solutions de gestion abordables..."
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üîó Causes (Pourquoi ce probl√®me existe-t-il ?)")
        causes = st.text_area(
            "Causes du probl√®me",
            value=arbre_data.get('causes', ''),
            height=150,
            help="Les raisons pour lesquelles ce probl√®me existe",
            placeholder="‚Ä¢ Manque de budget\n‚Ä¢ Solutions trop complexes\n‚Ä¢ Manque de formation..."
        )
    
    with col2:
        st.markdown("#### üí• Cons√©quences (Quel impact si non r√©solu ?)")
        consequences = st.text_area(
            "Cons√©quences du probl√®me",
            value=arbre_data.get('consequences', ''),
            height=150,
            help="Ce qui arrive si le probl√®me n'est pas r√©solu",
            placeholder="‚Ä¢ Perte de comp√©titivit√©\n‚Ä¢ Inefficacit√© op√©rationnelle\n‚Ä¢ Croissance limit√©e..."
        )
    
    st.markdown("#### üí° Votre Solution")
    solution = st.text_area(
        "Comment votre entreprise r√©sout-elle ce probl√®me ?",
        value=arbre_data.get('solution', ''),
        height=100,
        help="Votre approche pour r√©soudre le probl√®me identifi√©",
        placeholder="Ex: Nous proposons une solution SaaS simple et abordable..."
    )
    
    if st.button("üíæ Sauvegarder Arbre √† Probl√®me", type="primary"):
        arbre_probleme = {
            'probleme_central': probleme_central,
            'causes': causes,
            'consequences': consequences,
            'solution': solution,
            'date_creation': datetime.now().isoformat()
        }
        
        st.session_state['arbre_probleme'] = arbre_probleme
        sauvegarder_donnees_session('arbre_probleme', arbre_probleme)
        st.success("‚úÖ Arbre √† probl√®me sauvegard√©!")

# Fonctions utilitaires

def get_empty_business_model():
    """Retourne un business model vide"""
    return {
        'partenaires_cles': '',
        'activites_cles': '',
        'ressources_cles': '',
        'propositions_valeur': '',
        'relations_clients': '',
        'canaux_distribution': '',
        'segments_clients': '',
        'structure_couts': '',
        'sources_revenus': '',
        'nom_modele': '',
        'secteur_activite': '',
        'version': '1.0',
        'date_creation': datetime.now().isoformat()
    }

def get_business_model_template():
    """Retourne un template d'exemple pour le business model"""
    return {
        "nom_modele": "E-commerce Local",
        "secteur_activite": "Commerce √©lectronique",
        "version": "1.0",
        "date_creation": datetime.now().isoformat(),
        "partenaires_cles": "‚Ä¢ Fournisseurs locaux\n‚Ä¢ Partenaires logistiques\n‚Ä¢ Banques/syst√®mes de paiement",
        "activites_cles": "‚Ä¢ Gestion de plateforme e-commerce\n‚Ä¢ Marketing digital\n‚Ä¢ Service client",
        "ressources_cles": "‚Ä¢ Plateforme technologique\n‚Ä¢ Base de donn√©es clients\n‚Ä¢ √âquipe technique",
        "propositions_valeur": "‚Ä¢ Acc√®s facile aux produits locaux\n‚Ä¢ Livraison rapide\n‚Ä¢ Prix comp√©titifs",
        "relations_clients": "‚Ä¢ Service client responsive\n‚Ä¢ Programme de fid√©lit√©\n‚Ä¢ Support en ligne",
        "canaux_distribution": "‚Ä¢ Site web\n‚Ä¢ Application mobile\n‚Ä¢ R√©seaux sociaux",
        "segments_clients": "‚Ä¢ Particuliers urbains 25-45 ans\n‚Ä¢ Familles avec enfants\n‚Ä¢ Professionnels actifs",
        "structure_couts": "‚Ä¢ D√©veloppement technologique\n‚Ä¢ Marketing digital\n‚Ä¢ Co√ªts logistiques",
        "sources_revenus": "‚Ä¢ Commissions sur ventes\n‚Ä¢ Frais de livraison\n‚Ä¢ Services premium"
    }

def validate_business_model(business_model):
    """Valide qu'un business model a les champs essentiels remplis"""
    champs_obligatoires = [
        'propositions_valeur', 'segments_clients', 'sources_revenus'
    ]
    
    for champ in champs_obligatoires:
        if not business_model.get(champ, '').strip():
            return False
    
    return True

def validate_business_model_json(content):
    """Valide qu'un JSON import√© a la structure d'un business model"""
    champs_requis = [
        'partenaires_cles', 'activites_cles', 'ressources_cles',
        'propositions_valeur', 'relations_clients', 'canaux_distribution',
        'segments_clients', 'structure_couts', 'sources_revenus'
    ]
    
    return all(champ in content for champ in champs_requis)

def parse_text_to_business_model(text_content):
    """Parse un texte libre en structure business model"""
    # Impl√©mentation basique - peut √™tre am√©lior√©e avec IA
    return {
        **get_empty_business_model(),
        'propositions_valeur': text_content[:500] + "..." if len(text_content) > 500 else text_content,
        'date_creation': datetime.now().isoformat()
    }

def show_business_model_preview(business_model):
    """Affiche un aper√ßu du business model"""
    st.markdown("### üëÅÔ∏è Aper√ßu Business Model Canvas")
    
    # Organisation en 3 colonnes comme un vrai canvas
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.markdown("**ü§ù Partenaires Cl√©s**")
        st.write(business_model.get('partenaires_cles', 'Non d√©fini'))
        
        st.markdown("**üîß Activit√©s Cl√©s**")
        st.write(business_model.get('activites_cles', 'Non d√©fini'))
        
        st.markdown("**üõ†Ô∏è Ressources Cl√©s**")
        st.write(business_model.get('ressources_cles', 'Non d√©fini'))
    
    with col2:
        st.markdown("**üí° Propositions de Valeur**")
        st.write(business_model.get('propositions_valeur', 'Non d√©fini'))
        
        st.markdown("**ü§ù Relations Clients**")
        st.write(business_model.get('relations_clients', 'Non d√©fini'))
        
        st.markdown("**üì¢ Canaux**")
        st.write(business_model.get('canaux_distribution', 'Non d√©fini'))
    
    with col3:
        st.markdown("**üë• Segments Clients**")
        st.write(business_model.get('segments_clients', 'Non d√©fini'))
        
        st.markdown("**üí∞ Structure de Co√ªts**")
        st.write(business_model.get('structure_couts', 'Non d√©fini'))
        
        st.markdown("**üíµ Sources de Revenus**")
        st.write(business_model.get('sources_revenus', 'Non d√©fini'))

def export_business_model_json(business_model):
    """Exporte le business model en JSON"""
    json_data = json.dumps(business_model, indent=2, ensure_ascii=False)
    
    st.download_button(
        label="üì• T√©l√©charger Business Model (JSON)",
        data=json_data,
        file_name=f"business_model_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
        mime="application/json"
    )

def get_available_data_summary():
    """Retourne un r√©sum√© des donn√©es disponibles pour l'IA"""
    summary = []
    
    # Informations g√©n√©rales
    nom_entreprise = st.session_state.get('nom_entreprise', '')
    secteur_activite = st.session_state.get('secteur_activite', '')
    type_entreprise = st.session_state.get('type_entreprise', '')
    localisation = st.session_state.get('localisation', '')
    
    if nom_entreprise:
        summary.append(f"‚úÖ **Entreprise:** {nom_entreprise}")
    if secteur_activite:
        summary.append(f"‚úÖ **Secteur:** {secteur_activite}")
    if type_entreprise:
        summary.append(f"‚úÖ **Type:** {type_entreprise}")
    if localisation:
        summary.append(f"‚úÖ **Localisation:** {localisation}")
    
    # Arbre √† probl√®me
    arbre_probleme = st.session_state.get('arbre_probleme', {})
    if arbre_probleme.get('probleme_central'):
        summary.append(f"‚úÖ **Probl√®me identifi√©:** {arbre_probleme['probleme_central'][:100]}...")
    if arbre_probleme.get('solution'):
        summary.append(f"‚úÖ **Solution propos√©e:** {arbre_probleme['solution'][:100]}...")
    
    # Analyse de march√©
    analyse_marche = st.session_state.get('analyse_marche', {})
    if analyse_marche.get('taille_marche'):
        summary.append(f"‚úÖ **March√©:** {analyse_marche['taille_marche']}")
    if analyse_marche.get('type_clients'):
        summary.append(f"‚úÖ **Clients:** {analyse_marche['type_clients']}")
    
    # Analyse de concurrence
    concurrence = st.session_state.get('concurrence', {})
    if concurrence.get('concurrents_directs'):
        nb_concurrents = len([c for c in concurrence['concurrents_directs'] if c.strip()])
        if nb_concurrents > 0:
            summary.append(f"‚úÖ **Concurrence:** {nb_concurrents} concurrents identifi√©s")
    
    return "\n".join(summary) if summary else "Aucune donn√©e disponible. Remplissez d'abord les informations g√©n√©rales, l'arbre √† probl√®me ou l'analyse de march√©."

def prefill_with_ai(force_update=False):
    """Pr√©-remplit les champs du business model avec l'IA"""
    try:
        # V√©rifier qu'on a des donn√©es suffisantes
        if not has_sufficient_data():
            return False
        
        # Rassembler toutes les donn√©es disponibles
        context_data = gather_context_data()
        
        # G√©n√©rer les suggestions avec l'IA
        suggestions = generate_business_model_suggestions(context_data)
        
        if suggestions:
            # Mettre √† jour le business model avec les suggestions
            current_model = st.session_state.get('business_model_initial', get_empty_business_model())
            
            # Logique de remplacement : remplacer si vide OU si force_update=True
            for key, value in suggestions.items():
                if force_update or len(current_model.get(key, '').strip()) < 10:  # Seulement si le champ est vide ou tr√®s court, ou si force
                    current_model[key] = value
            
            st.session_state['business_model_initial'] = current_model
            return True
        
        return False
        
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration IA : {str(e)}")
        return False

def auto_prefill_on_load():
    """Pr√©-remplissage automatique intelligent au chargement de la page"""
    # V√©rifier si on a des donn√©es et si le business model est vide ou presque
    current_model = st.session_state.get('business_model_initial', get_empty_business_model())
    
    # Compter les champs remplis
    filled_fields = sum(1 for value in current_model.values() if isinstance(value, str) and len(value.strip()) > 10)
    
    # Debug info
    debug_enabled = st.session_state.get('debug_ai', False)
    if debug_enabled:
        st.write(f"üîç Champs remplis: {filled_fields}/9")
        st.write(f"üîç Donn√©es suffisantes: {has_sufficient_data()}")
        st.write(f"üîç Auto-remplissage d√©j√† fait: {st.session_state.get('auto_prefill_done', False)}")
    
    # Si moins de 3 champs remplis ET qu'on a des donn√©es suffisantes ‚Üí auto-remplissage
    if filled_fields < 3 and has_sufficient_data():
        # Marquer qu'on a fait un auto-remplissage pour √©viter les boucles
        if not st.session_state.get('auto_prefill_done', False):
            if debug_enabled:
                st.write("üöÄ D√©clenchement auto-remplissage...")
            if prefill_with_ai():
                st.session_state['auto_prefill_done'] = True
                # Info subtile pour l'utilisateur
                st.info("üí° **Suggestions IA ajout√©es automatiquement** bas√©es sur vos informations. Modifiez-les selon vos besoins !")
            elif debug_enabled:
                st.error("‚ùå √âchec du pr√©-remplissage IA")
    elif debug_enabled:
        if filled_fields >= 3:
            st.info("‚ÑπÔ∏è Business model d√©j√† rempli (3+ champs)")
        elif not has_sufficient_data():
            st.warning("‚ö†Ô∏è Donn√©es insuffisantes pour l'auto-remplissage")

def has_sufficient_data():
    """V√©rifie si on a suffisamment de donn√©es pour utiliser l'IA"""
    # Au minimum, il faut le nom de l'entreprise et soit l'arbre √† probl√®me, soit l'analyse de march√©
    nom_entreprise = st.session_state.get('nom_entreprise', '')
    arbre_probleme = st.session_state.get('arbre_probleme', {})
    analyse_marche = st.session_state.get('analyse_marche', {})
    
    # Informations g√©n√©rales depuis les donn√©es
    data = st.session_state.get('data', {})
    info_gen = data.get('informations_generales', {})
    nom_entreprise_alt = info_gen.get('nom_entreprise', '')
    
    has_entreprise = bool(nom_entreprise.strip()) or bool(nom_entreprise_alt.strip())
    has_probleme = bool(arbre_probleme.get('probleme_central', '').strip())
    has_marche = bool(analyse_marche.get('besoin_principal', '').strip())
    
    # Debug - affichage temporaire
    debug_checkbox = st.checkbox("üîç Debug IA", help="Affiche les donn√©es disponibles pour l'IA", value=True)  # Activ√© par d√©faut pour diagnostic
    st.session_state['debug_ai'] = debug_checkbox
    
    if debug_checkbox:
        st.write("**Donn√©es d√©tect√©es:**")
        st.write(f"- Nom entreprise (session): '{nom_entreprise}'")
        st.write(f"- Nom entreprise (data): '{nom_entreprise_alt}'")
        st.write(f"- Has entreprise: {has_entreprise}")
        st.write(f"- Arbre probl√®me: {arbre_probleme}")
        st.write(f"- Has probl√®me: {has_probleme}")
        st.write(f"- Analyse march√©: {analyse_marche}")
        st.write(f"- Has march√©: {has_marche}")
        st.write(f"- Donn√©es suffisantes: {has_entreprise and (has_probleme or has_marche)}")
    
    return has_entreprise and (has_probleme or has_marche)

def gather_context_data():
    """Rassemble toutes les donn√©es de contexte disponibles"""
    context = {}
    
    # Informations g√©n√©rales - plusieurs sources possibles
    context['nom_entreprise'] = st.session_state.get('nom_entreprise', '')
    context['secteur_activite'] = st.session_state.get('secteur_activite', '')
    context['type_entreprise'] = st.session_state.get('type_entreprise', 'PME')
    context['localisation'] = st.session_state.get('localisation', '')
    
    # Essayer aussi depuis les donn√©es financi√®res
    data = st.session_state.get('data', {})
    info_gen = data.get('informations_generales', {})
    if not context['nom_entreprise'] and info_gen.get('nom_entreprise'):
        context['nom_entreprise'] = info_gen.get('nom_entreprise', '')
    if not context['secteur_activite'] and info_gen.get('secteur_activite'):
        context['secteur_activite'] = info_gen.get('secteur_activite', '')
    
    # Arbre √† probl√®me
    arbre_probleme = st.session_state.get('arbre_probleme', {})
    context['probleme_central'] = arbre_probleme.get('probleme_central', '')
    context['solution'] = arbre_probleme.get('solution', '')
    context['causes'] = arbre_probleme.get('causes', '')
    context['consequences'] = arbre_probleme.get('consequences', '')
    
    # Analyse de march√©
    analyse_marche = st.session_state.get('analyse_marche', {})
    context['taille_marche'] = analyse_marche.get('taille_marche', '')
    context['type_clients'] = analyse_marche.get('type_clients', '')
    context['budget_moyen'] = analyse_marche.get('budget_moyen', '')
    context['besoin_principal'] = analyse_marche.get('besoin_principal', '')
    context['tendances'] = analyse_marche.get('tendances', [])
    
    # Analyse de concurrence
    concurrence = st.session_state.get('concurrence', {})
    context['concurrents_directs'] = concurrence.get('concurrents_directs', [])
    context['strategie'] = concurrence.get('strategie', '')
    context['forces'] = concurrence.get('forces', '')
    
    return context

def generate_business_model_suggestions(context_data):
    """G√©n√®re les suggestions de business model avec l'IA"""
    try:
        from services.ai.content_generation import generer_suggestions_intelligentes
        
        # G√©n√©rer des suggestions pour chaque bloc du business model
        suggestions = {}
        
        blocs = [
            'partenaires_cles', 'activites_cles', 'ressources_cles',
            'propositions_valeur', 'relations_clients', 'canaux_distribution',
            'segments_clients', 'structure_couts', 'sources_revenus'
        ]
        
        # Debug info
        if st.session_state.get('debug_ai', False):
            st.write("üîÑ Tentative g√©n√©ration IA...")
        
        for bloc in blocs:
            suggestions_bloc = generer_suggestions_intelligentes(
                donnees_existantes=context_data,
                section=bloc.replace('_', ' ').title(),
                template_nom="COPA TRANSFORME"
            )
            # Joindre les suggestions avec des puces
            suggestions[bloc] = '\n'.join([f"‚Ä¢ {s}" for s in suggestions_bloc[:3]]) if suggestions_bloc else ""
        
        # V√©rifier si on a au moins quelques suggestions
        valid_suggestions = sum(1 for v in suggestions.values() if v.strip())
        
        if valid_suggestions > 0:
            if st.session_state.get('debug_ai', False):
                st.success(f"‚úÖ IA: {valid_suggestions} blocs g√©n√©r√©s")
            return suggestions
        else:
            if st.session_state.get('debug_ai', False):
                st.warning("‚ö†Ô∏è IA: Aucune suggestion g√©n√©r√©e, utilisation du fallback")
            return generate_fallback_suggestions(context_data)
        
    except (ImportError, ModuleNotFoundError) as e:
        if st.session_state.get('debug_ai', False):
            st.warning(f"‚ö†Ô∏è Module IA non trouv√©: {str(e)}, utilisation du fallback")
        return generate_fallback_suggestions(context_data)
    except Exception as e:
        if st.session_state.get('debug_ai', False):
            st.error(f"‚ùå Erreur IA: {str(e)}, utilisation du fallback")
        return generate_fallback_suggestions(context_data)

def create_business_model_prompt(context_data):
    """Cr√©e un prompt contextualis√© pour l'IA"""
    
    prompt = f"""
    Analysez les informations suivantes et g√©n√©rez des suggestions pour chacun des 9 blocs du Business Model Canvas.
    
    **CONTEXTE ENTREPRISE:**
    - Nom: {context_data.get('nom_entreprise', 'Non sp√©cifi√©')}
    - Secteur: {context_data.get('secteur_activite', 'Non sp√©cifi√©')}
    - Type: {context_data.get('type_entreprise', 'PME')}
    - Localisation: {context_data.get('localisation', 'Non sp√©cifi√©e')}
    
    **PROBL√âMATIQUE:**
    - Probl√®me central: {context_data.get('probleme_central', 'Non sp√©cifi√©')}
    - Solution propos√©e: {context_data.get('solution', 'Non sp√©cifi√©e')}
    
    **MARCH√â:**
    - Taille du march√©: {context_data.get('taille_marche', 'Non sp√©cifi√©e')}
    - Type de clients: {context_data.get('type_clients', 'Non sp√©cifi√©')}
    - Budget moyen: {context_data.get('budget_moyen', 'Non sp√©cifi√©')}
    - Besoin principal: {context_data.get('besoin_principal', 'Non sp√©cifi√©')}
    
    **CONCURRENCE:**
    - Strat√©gie: {context_data.get('strategie', 'Non sp√©cifi√©e')}
    - Forces: {context_data.get('forces', 'Non sp√©cifi√©es')}
    
    G√©n√©rez des suggestions courtes et pr√©cises (2-3 lignes max par bloc) pour:
    1. Partenaires cl√©s
    2. Activit√©s cl√©s  
    3. Ressources cl√©s
    4. Propositions de valeur
    5. Relations clients
    6. Canaux de distribution
    7. Segments clients
    8. Structure de co√ªts
    9. Sources de revenus
    
    Adaptez les suggestions au contexte africain/RDC et au type d'entreprise ({context_data.get('type_entreprise', 'PME')}).
    """
    
    return prompt

def generate_fallback_suggestions(context_data):
    """G√©n√®re des suggestions basiques sans IA (fallback)"""
    
    secteur = context_data.get('secteur_activite', '').lower()
    type_entreprise = context_data.get('type_entreprise', 'PME')
    
    # Suggestions basiques selon le secteur et le type
    if 'tech' in secteur or type_entreprise == 'Startup':
        return {
            'partenaires_cles': '‚Ä¢ D√©veloppeurs techniques\n‚Ä¢ Partenaires technologiques\n‚Ä¢ Investisseurs',
            'activites_cles': '‚Ä¢ D√©veloppement produit\n‚Ä¢ Marketing digital\n‚Ä¢ Support client',
            'ressources_cles': '‚Ä¢ Plateforme technologique\n‚Ä¢ √âquipe de d√©veloppement\n‚Ä¢ Base de donn√©es',
            'propositions_valeur': '‚Ä¢ Solution innovante et accessible\n‚Ä¢ Gain de temps et d\'efficacit√©\n‚Ä¢ Prix comp√©titif',
            'relations_clients': '‚Ä¢ Support en ligne 24/7\n‚Ä¢ Communaut√© d\'utilisateurs\n‚Ä¢ Formation et onboarding',
            'canaux_distribution': '‚Ä¢ Site web et application\n‚Ä¢ R√©seaux sociaux\n‚Ä¢ Partenaires distributeurs',
            'segments_clients': '‚Ä¢ PME locales\n‚Ä¢ Professionnels tech-savvy\n‚Ä¢ Entreprises en croissance',
            'structure_couts': '‚Ä¢ D√©veloppement technique\n‚Ä¢ Marketing digital\n‚Ä¢ Infrastructure cloud',
            'sources_revenus': '‚Ä¢ Abonnements mensuels\n‚Ä¢ Commissions sur transactions\n‚Ä¢ Services premium'
        }
    else:
        return {
            'partenaires_cles': '‚Ä¢ Fournisseurs locaux\n‚Ä¢ Distributeurs\n‚Ä¢ Institutions financi√®res',
            'activites_cles': '‚Ä¢ Production/Fabrication\n‚Ä¢ Vente et distribution\n‚Ä¢ Service client',
            'ressources_cles': '‚Ä¢ √âquipements de production\n‚Ä¢ Main d\'≈ìuvre qualifi√©e\n‚Ä¢ R√©seau de distribution',
            'propositions_valeur': '‚Ä¢ Produits de qualit√© locale\n‚Ä¢ Service personnalis√©\n‚Ä¢ Prix accessible',
            'relations_clients': '‚Ä¢ Relation directe\n‚Ä¢ Service apr√®s-vente\n‚Ä¢ Fid√©lisation clients',
            'canaux_distribution': '‚Ä¢ Magasins physiques\n‚Ä¢ R√©seau de revendeurs\n‚Ä¢ Vente directe',
            'segments_clients': '‚Ä¢ Consommateurs locaux\n‚Ä¢ Entreprises B2B\n‚Ä¢ Particuliers',
            'structure_couts': '‚Ä¢ Co√ªt des mati√®res premi√®res\n‚Ä¢ Salaires et charges\n‚Ä¢ Co√ªts de distribution',
            'sources_revenus': '‚Ä¢ Vente de produits\n‚Ä¢ Services associ√©s\n‚Ä¢ Contrats de maintenance'
        }
"""
Page de g√©n√©ration du business model
"""

import streamlit as st
from services.business import obtenir_business_model, sauvegarder_donnees_session, get_donnees_consolidees
from services.ai import generer_suggestions_intelligentes
from ui.components import afficher_template_info
from templates import get_metaprompt

def page_generer_business_model():
    """Page de g√©n√©ration du business model canvas"""
    
    st.title("üéØ G√©n√©rateur de Business Model Canvas")
    
    # Affichage du template actuel
    template_actuel = st.session_state.get('template_selectionne', 'COPA TRANSFORME')
    afficher_template_info()
    
    # V√©rification des donn√©es pr√©alables
    donnees_consolidees = get_donnees_consolidees()
    
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("### üìã √âtat des donn√©es")
        
        # V√©rification persona
        if donnees_consolidees['donnees_business']['persona']:
            st.success("‚úÖ Donn√©es persona collect√©es")
        else:
            st.warning("‚ö†Ô∏è Donn√©es persona manquantes")
        
        # V√©rification march√©
        if donnees_consolidees['donnees_business']['marche']:
            st.success("‚úÖ Analyse march√© effectu√©e")
        else:
            st.warning("‚ö†Ô∏è Analyse march√© manquante")
        
        # V√©rification concurrence
        if donnees_consolidees['donnees_business']['concurrence']:
            st.success("‚úÖ Analyse concurrence compl√©t√©e")
        else:
            st.warning("‚ö†Ô∏è Analyse concurrence manquante")
    
    with col1:
        st.markdown("### üöÄ G√©n√©ration du Business Model")
        
        # Options de g√©n√©ration
        mode_generation = st.radio(
            "Mode de g√©n√©ration",
            [
                "G√©n√©ration automatique compl√®te",
                "G√©n√©ration par sections",
                "Am√©lioration du mod√®le existant"
            ],
            help="Choisissez comment vous souhaitez g√©n√©rer votre business model"
        )
        
        if mode_generation == "G√©n√©ration automatique compl√®te":
            generer_business_model_complet(donnees_consolidees, template_actuel)
        
        elif mode_generation == "G√©n√©ration par sections":
            generer_par_sections(donnees_consolidees, template_actuel)
        
        elif mode_generation == "Am√©lioration du mod√®le existant":
            ameliorer_modele_existant(donnees_consolidees, template_actuel)

def generer_business_model_complet(donnees_consolidees, template_actuel):
    """G√©n√®re un business model complet automatiquement"""
    
    st.markdown("#### G√©n√©ration Automatique Compl√®te")
    
    # V√©rification des donn√©es minimales
    donnees_business = donnees_consolidees['donnees_business']
    
    if not donnees_business['persona']:
        st.error("‚ùå Les donn√©es persona sont obligatoires pour la g√©n√©ration automatique.")
        st.info("Veuillez d'abord compl√©ter l'onglet 'Collecte des Donn√©es' ‚Üí 'Persona PME'")
        return
    
    st.info("Cette option g√©n√®re un business model canvas complet bas√© sur toutes vos donn√©es collect√©es.")
    
    # Param√®tres de g√©n√©ration
    with st.expander("‚öôÔ∏è Param√®tres avanc√©s"):
        niveau_detail = st.selectbox(
            "Niveau de d√©tail",
            ["Standard", "D√©taill√©", "Synth√©tique"],
            index=0,
            help="Niveau de d√©tail souhait√© pour le business model"
        )
        
        focus_secteur = st.checkbox(
            "Accent sur les sp√©cificit√©s sectorielles",
            value=True,
            help="Mettre l'accent sur les caract√©ristiques de votre secteur d'activit√©"
        )
        
        inclure_risques = st.checkbox(
            "Inclure l'analyse des risques",
            value=True,
            help="Ajouter une section sur les risques et leur gestion"
        )
    
    # Bouton de g√©n√©ration
    if st.button("üéØ G√©n√©rer le Business Model Complet", type="primary"):
        
        with st.spinner("G√©n√©ration en cours... Cela peut prendre quelques minutes."):
            
            try:
                # G√©n√©ration du business model
                business_model_genere = obtenir_business_model(
                    donnees_consolidees['donnees_business'],
                    template_actuel
                )
                
                # Sauvegarde
                sauvegarder_donnees_session('business_model_precedent', business_model_genere)
                
                # Affichage du r√©sultat
                st.success("‚úÖ Business Model g√©n√©r√© avec succ√®s!")
                
                # Affichage avec possibilit√© d'√©dition
                business_model_edite = st.text_area(
                    "Business Model Canvas (modifiable)",
                    value=business_model_genere,
                    height=600,
                    help="Vous pouvez modifier le contenu g√©n√©r√© avant de le sauvegarder d√©finitivement"
                )
                
                # Boutons d'action
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button("üíæ Sauvegarder les modifications"):
                        sauvegarder_donnees_session('business_model_precedent', business_model_edite)
                        st.success("Modifications sauvegard√©es!")
                
                with col2:
                    if st.button("üîÑ R√©g√©n√©rer"):
                        st.rerun()
                
                with col3:
                    if st.button("üì• T√©l√©charger"):
                        st.download_button(
                            "T√©l√©charger le Business Model",
                            business_model_edite,
                            file_name=f"business_model_{donnees_consolidees['donnees_generales']['nom_entreprise']}.txt",
                            mime="text/plain"
                        )
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")
                st.info("Veuillez v√©rifier vos donn√©es et r√©essayer.")

def generer_par_sections(donnees_consolidees, template_actuel):
    """G√©n√®re le business model section par section"""
    
    st.markdown("#### G√©n√©ration par Sections")
    st.info("Cette option vous permet de g√©n√©rer et personnaliser chaque section individuellement.")
    
    # Sections du business model canvas
    sections_canvas = [
        ("Partenaires cl√©s", "Qui sont vos partenaires et fournisseurs cl√©s ?"),
        ("Activit√©s cl√©s", "Quelles sont vos activit√©s les plus importantes ?"),
        ("Ressources cl√©s", "De quelles ressources avez-vous absolument besoin ?"),
        ("Propositions de valeur", "Quelle valeur apportez-vous √† vos clients ?"),
        ("Relations clients", "Comment maintenez-vous les relations avec vos clients ?"),
        ("Canaux de distribution", "Par quels moyens atteignez-vous vos clients ?"),
        ("Segments de client√®le", "Qui sont vos clients les plus importants ?"),
        ("Structure de co√ªts", "Quels sont vos co√ªts les plus importants ?"),
        ("Sources de revenus", "Comment g√©n√©rez-vous des revenus ?")
    ]
    
    # S√©lection de la section √† g√©n√©rer
    section_selectionnee = st.selectbox(
        "Choisissez une section √† g√©n√©rer",
        [f"{i+1}. {nom}" for i, (nom, _) in enumerate(sections_canvas)],
        help="S√©lectionnez la section du business model canvas que vous souhaitez g√©n√©rer"
    )
    
    section_index = int(section_selectionnee.split('.')[0]) - 1
    section_nom, section_description = sections_canvas[section_index]
    
    st.markdown(f"**Section s√©lectionn√©e :** {section_nom}")
    st.markdown(f"*{section_description}*")
    
    # G√©n√©ration de la section
    if st.button(f"G√©n√©rer '{section_nom}'", type="primary"):
        
        with st.spinner(f"G√©n√©ration de la section '{section_nom}'..."):
            
            try:
                # Utiliser le service de g√©n√©ration de suggestions
                suggestions = generer_suggestions_intelligentes(
                    donnees_consolidees['donnees_business'],
                    section_nom,
                    template_actuel
                )
                
                st.success(f"‚úÖ Section '{section_nom}' g√©n√©r√©e!")
                
                # Affichage des suggestions
                if suggestions:
                    st.markdown("**Suggestions g√©n√©r√©es :**")
                    for i, suggestion in enumerate(suggestions, 1):
                        st.markdown(f"{i}. {suggestion}")
                    
                    # Zone d'√©dition
                    contenu_section = st.text_area(
                        f"Contenu final pour '{section_nom}'",
                        value="\n".join([f"‚Ä¢ {s}" for s in suggestions]),
                        height=200,
                        help="Modifiez le contenu selon vos besoins"
                    )
                    
                    # Sauvegarde de la section
                    if st.button(f"Sauvegarder '{section_nom}'"):
                        cle_section = f"business_model_section_{section_index}"
                        sauvegarder_donnees_session(cle_section, contenu_section)
                        st.success(f"Section '{section_nom}' sauvegard√©e!")
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")

def ameliorer_modele_existant(donnees_consolidees, template_actuel):
    """Am√©liore un business model existant"""
    
    st.markdown("#### Am√©lioration du Mod√®le Existant")
    
    business_model_existant = st.session_state.get('business_model_precedent', '')
    
    if not business_model_existant:
        st.warning("‚ö†Ô∏è Aucun business model existant trouv√©.")
        st.info("G√©n√©rez d'abord un business model complet ou cr√©ez-en un manuellement.")
        
        # Option de cr√©ation manuelle
        with st.expander("‚úèÔ∏è Cr√©er un business model manuellement"):
            business_model_manuel = st.text_area(
                "Saisissez votre business model actuel",
                height=400,
                placeholder="Entrez ici votre business model canvas existant..."
            )
            
            if st.button("Sauvegarder le mod√®le manuel"):
                sauvegarder_donnees_session('business_model_precedent', business_model_manuel)
                st.success("Business model manuel sauvegard√©!")
                st.rerun()
        
        return
    
    st.info("Am√©liorez votre business model existant avec des suggestions personnalis√©es.")
    
    # Affichage du mod√®le existant
    with st.expander("üìÑ Business Model Actuel"):
        st.text_area(
            "Mod√®le actuel (lecture seule)",
            value=business_model_existant,
            height=300,
            disabled=True
        )
    
    # Options d'am√©lioration
    type_amelioration = st.selectbox(
        "Type d'am√©lioration",
        [
            "Optimisation g√©n√©rale",
            "Renforcement de la proposition de valeur",
            "Am√©lioration de la rentabilit√©",
            "Expansion des segments clients",
            "Diversification des revenus"
        ],
        help="Choisissez l'aspect que vous souhaitez am√©liorer"
    )
    
    # Contexte d'am√©lioration
    contexte_amelioration = st.text_area(
        "Contexte sp√©cifique ou d√©fis rencontr√©s",
        height=100,
        placeholder="Ex: Difficult√© √† fid√©liser les clients, co√ªts trop √©lev√©s, concurrence accrue..."
    )
    
    # G√©n√©ration des am√©liorations
    if st.button("üîß G√©n√©rer des Am√©liorations", type="primary"):
        
        with st.spinner("G√©n√©ration des am√©liorations..."):
            
            # Ici, on utiliserait le service AI pour g√©n√©rer des am√©liorations
            # bas√©es sur le mod√®le existant et le contexte
            try:
                from services.ai import generer_contenu_personnalise
                
                donnees_contexte = {
                    'business_model_existant': business_model_existant,
                    'type_amelioration': type_amelioration,
                    'contexte': contexte_amelioration,
                    'donnees_entreprise': donnees_consolidees['donnees_business']
                }
                
                ameliorations = generer_contenu_personnalise(
                    template_actuel,
                    "amelioration_business_model",
                    donnees_contexte
                )
                
                st.success("‚úÖ Am√©liorations g√©n√©r√©es!")
                
                # Affichage des am√©liorations
                ameliorations_editees = st.text_area(
                    "Am√©liorations sugg√©r√©es (modifiables)",
                    value=ameliorations,
                    height=400
                )
                
                # Options de sauvegarde
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üíæ Sauvegarder les am√©liorations"):
                        # Ajouter les am√©liorations au business model existant
                        business_model_ameliore = business_model_existant + "\n\n## AM√âLIORATIONS SUGG√âR√âES\n\n" + ameliorations_editees
                        sauvegarder_donnees_session('business_model_precedent', business_model_ameliore)
                        st.success("Am√©liorations ajout√©es au business model!")
                
                with col2:
                    if st.button("üîÑ Remplacer le mod√®le existant"):
                        sauvegarder_donnees_session('business_model_precedent', ameliorations_editees)
                        st.success("Business model remplac√© par la version am√©lior√©e!")
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration d'am√©liorations : {str(e)}")

def afficher_historique_versions():
    """Affiche l'historique des versions du business model"""
    
    with st.expander("üìö Historique des versions"):
        st.info("Fonctionnalit√© √† venir : historique et versioning des business models")
        # Ici on pourrait impl√©menter un syst√®me de versioning